/**
 * generated by Xtext
 */
package org.project.droolsDSL.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl.Container;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.generator.IGenerator;
import org.eclipse.xtext.xbase.lib.Conversions;
import org.eclipse.xtext.xbase.lib.Functions.Function0;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.project.droolsDSL.MyOutputConfigurationProvider;
import org.project.droolsDSL.ddsl.ConditionRule;
import org.project.droolsDSL.ddsl.Event;
import org.project.droolsDSL.ddsl.EventFeature;
import org.project.droolsDSL.ddsl.Expression;
import org.project.droolsDSL.ddsl.Fluent;
import org.project.droolsDSL.ddsl.InExpr;
import org.project.droolsDSL.ddsl.InRule;
import org.project.droolsDSL.ddsl.ReferenceType;
import org.project.droolsDSL.ddsl.Statement;
import org.project.droolsDSL.ddsl.ToRule;
import org.project.droolsDSL.ddsl.impl.AndImpl;
import org.project.droolsDSL.ddsl.impl.BoolConstantImpl;
import org.project.droolsDSL.ddsl.impl.ComparisonImpl;
import org.project.droolsDSL.ddsl.impl.EqualityImpl;
import org.project.droolsDSL.ddsl.impl.EventFeatureImpl;
import org.project.droolsDSL.ddsl.impl.ExpressionImpl;
import org.project.droolsDSL.ddsl.impl.FloatConstantImpl;
import org.project.droolsDSL.ddsl.impl.FluentImpl;
import org.project.droolsDSL.ddsl.impl.InExprImpl;
import org.project.droolsDSL.ddsl.impl.IntConstantImpl;
import org.project.droolsDSL.ddsl.impl.MinusImpl;
import org.project.droolsDSL.ddsl.impl.MulOrDivImpl;
import org.project.droolsDSL.ddsl.impl.NotImpl;
import org.project.droolsDSL.ddsl.impl.OrImpl;
import org.project.droolsDSL.ddsl.impl.PlusImpl;
import org.project.droolsDSL.ddsl.impl.ReferenceImpl;
import org.project.droolsDSL.ddsl.impl.ReferenceTypeImpl;
import org.project.droolsDSL.utils.Statement_Context;

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
@SuppressWarnings("all")
public class DdslGenerator implements IGenerator {
  /**
   * STRING
   */
  public final static String MODEL_LIB_NAME_MVN = "Model_Lib-1.0.jar";
  
  public final static String PATH_SUPPORT_STRING = "C:\\Users\\Soli\\Desktop\\SUPPORT";
  
  public final static String PATH_MAVEN_REPO_WIN_STRING = new Function0<String>() {
    public String apply() {
      String _property = System.getProperty("user.home");
      String _plus = (_property + "\\.m2\\repository");
      return _plus;
    }
  }.apply();
  
  public final static String PACKAGE_NAME = "com.gradle.application.medicalec";
  
  private final String APPLICATION_NAME = "APPLICATION_NAME";
  
  private List<Statement_Context> statement_List = new Function0<List<Statement_Context>>() {
    public List<Statement_Context> apply() {
      ArrayList<Statement_Context> _arrayList = new ArrayList<Statement_Context>();
      return _arrayList;
    }
  }.apply();
  
  private Map<Integer,String[]> allEventParams = new Function0<Map<Integer,String[]>>() {
    public Map<Integer,String[]> apply() {
      HashMap<Integer,String[]> _hashMap = new HashMap<Integer, String[]>();
      return _hashMap;
    }
  }.apply();
  
  public void doGenerate(final Resource resource, final IFileSystemAccess fsa) {
    this.statement_List.clear();
    TreeIterator<EObject> _allContents = resource.getAllContents();
    Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_allContents);
    Iterable<Statement> _filter = Iterables.<Statement>filter(_iterable, Statement.class);
    for (final Statement e : _filter) {
      {
        ArrayList<String> _arrayList = new ArrayList<String>();
        List<String> fluents = _arrayList;
        fluents.clear();
        ArrayList<String> _arrayList_1 = new ArrayList<String>();
        List<String> params = _arrayList_1;
        params.clear();
        String eventNameTemp = "";
        Event _event = e.getEvent();
        String _eventName = _event.getEventName();
        eventNameTemp = _eventName;
        Event _event_1 = e.getEvent();
        EList<EventFeature> _param = _event_1.getParam();
        boolean _notEquals = (!Objects.equal(_param, null));
        if (_notEquals) {
          Event _event_2 = e.getEvent();
          EList<EventFeature> _param_1 = _event_2.getParam();
          for (final EventFeature p : _param_1) {
            String _name = p.getName();
            params.add(_name);
          }
        }
        HashMap<String,Object[]> _hashMap = new HashMap<String, Object[]>();
        Map<String,Object[]> fluentContextTemp = _hashMap;
        EList<Fluent> _fluent = e.getFluent();
        for (final Fluent f : _fluent) {
          {
            ToRule toValueTemp = f.getValuePart();
            InRule timeTemp = null;
            InRule _timePart = f.getTimePart();
            boolean _notEquals_1 = (!Objects.equal(_timePart, null));
            if (_notEquals_1) {
              InRule _timePart_1 = f.getTimePart();
              timeTemp = _timePart_1;
            }
            ConditionRule condTemp = null;
            ConditionRule _condPart = f.getCondPart();
            boolean _notEquals_2 = (!Objects.equal(_condPart, null));
            if (_notEquals_2) {
              ConditionRule _condPart_1 = f.getCondPart();
              condTemp = _condPart_1;
            }
            ArrayList<Object> _arrayList_2 = new ArrayList<Object>();
            List<Object> contextTemp = _arrayList_2;
            contextTemp.clear();
            contextTemp.add(toValueTemp);
            contextTemp.add(timeTemp);
            contextTemp.add(condTemp);
            String _name_1 = f.getName();
            final List<Object> _converted_contextTemp = (List<Object>)contextTemp;
            fluentContextTemp.put(_name_1, ((Object[])Conversions.unwrapArray(_converted_contextTemp, Object.class)));
          }
        }
        Statement_Context _statement_Context = new Statement_Context(eventNameTemp, ((String[])Conversions.unwrapArray(params, String.class)), fluentContextTemp);
        this.statement_List.add(_statement_Context);
      }
    }
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("models/MainModel.java");
    CharSequence _compileMain = this.compileMain();
    fsa.generateFile(_builder.toString(), _compileMain);
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("AndroidManifest.xml");
    CharSequence _compileManifest = this.compileManifest();
    fsa.generateFile(_builder_1.toString(), MyOutputConfigurationProvider.APP_GEN_OUTPUT, _compileManifest);
    StringConcatenation _builder_2 = new StringConcatenation();
    _builder_2.append("src/com.gradle.application.medicalec/MainActivity.java");
    CharSequence _compileMainJava = this.compileMainJava();
    fsa.generateFile(_builder_2.toString(), MyOutputConfigurationProvider.APP_GEN_OUTPUT, _compileMainJava);
    StringConcatenation _builder_3 = new StringConcatenation();
    _builder_3.append("res/values/styles.xml");
    CharSequence _compileValueStyle = this.compileValueStyle();
    fsa.generateFile(_builder_3.toString(), MyOutputConfigurationProvider.APP_GEN_OUTPUT, _compileValueStyle);
    StringConcatenation _builder_4 = new StringConcatenation();
    _builder_4.append("res/values/strings.xml");
    CharSequence _compileValueString = this.compileValueString();
    fsa.generateFile(_builder_4.toString(), MyOutputConfigurationProvider.APP_GEN_OUTPUT, _compileValueString);
    StringConcatenation _builder_5 = new StringConcatenation();
    _builder_5.append("res/values/dimens.xml");
    CharSequence _compileValueDimens = this.compileValueDimens();
    fsa.generateFile(_builder_5.toString(), MyOutputConfigurationProvider.APP_GEN_OUTPUT, _compileValueDimens);
    StringConcatenation _builder_6 = new StringConcatenation();
    _builder_6.append("res/layout/activity_main.xml");
    CharSequence _compileLayoutActivityMain = this.compileLayoutActivityMain();
    fsa.generateFile(_builder_6.toString(), MyOutputConfigurationProvider.APP_GEN_OUTPUT, _compileLayoutActivityMain);
    StringConcatenation _builder_7 = new StringConcatenation();
    _builder_7.append("res/layout/fragment_main_dummy.xml");
    CharSequence _compileLayoutFragmentMainDummy = this.compileLayoutFragmentMainDummy();
    fsa.generateFile(_builder_7.toString(), MyOutputConfigurationProvider.APP_GEN_OUTPUT, _compileLayoutFragmentMainDummy);
    StringConcatenation _builder_8 = new StringConcatenation();
    _builder_8.append("res/menu/main.xml");
    CharSequence _compileMenuMain = this.compileMenuMain();
    fsa.generateFile(_builder_8.toString(), MyOutputConfigurationProvider.APP_GEN_OUTPUT, _compileMenuMain);
    StringConcatenation _builder_9 = new StringConcatenation();
    _builder_9.append("build.gradle");
    CharSequence _compileGradle = this.compileGradle();
    fsa.generateFile(_builder_9.toString(), MyOutputConfigurationProvider.APP_GEN_OUTPUT, _compileGradle);
  }
  
  /**
   * _____Compile Method_____
   */
  public CharSequence compileMain() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    _builder.append(DdslGenerator.PACKAGE_NAME, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("//IMPORTs");
    _builder.newLine();
    _builder.append("import it.bragaglia.freckles.model.*;");
    _builder.newLine();
    _builder.append("import it.bragaglia.freckles.model.expressions.*;");
    _builder.newLine();
    _builder.append("import it.bragaglia.freckles.model.expressions.operations.*;");
    _builder.newLine();
    _builder.append("import it.bragaglia.freckles.model.conditions.*;");
    _builder.newLine();
    _builder.append("import it.bragaglia.freckles.model.conditions.relations.*;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.util.ArrayList;");
    _builder.newLine();
    _builder.append("import java.util.HashMap;");
    _builder.newLine();
    _builder.append("import java.util.List;");
    _builder.newLine();
    _builder.append("import java.util.Map;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class MainModel {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static void main (String[] args) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Model model = new ModelImpl();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("/*");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public MainModel__Time(Model myGenModel){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("this.model=myGenModel;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("*/");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("ExpressionDescr exprContainer;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("ConditionDescr condContainer;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Context contextContainer;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Effect effectContainer;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("List<Effect> effects = new ArrayList<Effect>();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    CharSequence _compileParams = this.compileParams();
    _builder.append(_compileParams, "		");
    _builder.newLineIfNotEmpty();
    {
      for(final Statement_Context statementCurr : this.statement_List) {
        _builder.append("\t\t");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("// Statement ");
        int _indexOf = this.statement_List.indexOf(statementCurr);
        _builder.append(_indexOf, "		");
        _builder.append(" proceed...");
        _builder.newLineIfNotEmpty();
        {
          String[] _fluents = statementCurr.getFluents();
          for(final String f : _fluents) {
            _builder.append("\t\t");
            _builder.append("\t");
            Object _expression = statementCurr.getExpression(f);
            ExpressionImpl exprImplTemp = ((ExpressionImpl) _expression);
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t");
            _builder.append("\t");
            String _eventName = statementCurr.getEventName();
            int _indexOf_1 = this.statement_List.indexOf(statementCurr);
            CharSequence _compileExpr = this.compileExpr(_eventName, _indexOf_1, f, exprImplTemp);
            _builder.append(_compileExpr, "			");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("\t\t");
        _builder.append("// Statement ");
        int _indexOf_2 = this.statement_List.indexOf(statementCurr);
        _builder.append(_indexOf_2, "		");
        _builder.append(" Finish");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("//System.out.println(\"Done.\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  /**
   * _____Parameter Instance_____
   */
  public CharSequence compileParams() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("// Parameters MAP ");
    _builder.newLine();
    _builder.newLine();
    _builder.append("Map<Integer, ParameterDescr[]> allEventParams = new HashMap<Integer, ParameterDescr[]>();");
    _builder.newLine();
    {
      for(final Statement_Context statementCurr : this.statement_List) {
        {
          String[] _params = statementCurr.getParams();
          boolean _notEquals = (!Objects.equal(_params, null));
          if (_notEquals) {
            int _indexOf = this.statement_List.indexOf(statementCurr);
            String[] _params_1 = statementCurr.getParams();
            String[] _put = this.allEventParams.put(Integer.valueOf(_indexOf), _params_1);
            _builder.append(_put, "");
            _builder.newLineIfNotEmpty();
            _builder.append("ParameterDescr paramsOfStatement_");
            int _indexOf_1 = this.statement_List.indexOf(statementCurr);
            _builder.append(_indexOf_1, "");
            _builder.append("[] = new ParameterDescr[");
            int _indexOf_2 = this.statement_List.indexOf(statementCurr);
            Statement_Context _get = this.statement_List.get(_indexOf_2);
            String[] _params_2 = _get.getParams();
            int _length = _params_2.length;
            _builder.append(_length, "");
            _builder.append("];");
            _builder.newLineIfNotEmpty();
            {
              int _indexOf_3 = this.statement_List.indexOf(statementCurr);
              Statement_Context _get_1 = this.statement_List.get(_indexOf_3);
              String[] _params_3 = _get_1.getParams();
              for(final String p : _params_3) {
                _builder.append("paramsOfStatement_");
                int _indexOf_4 = this.statement_List.indexOf(statementCurr);
                _builder.append(_indexOf_4, "");
                _builder.append("[");
                int _indexOf_5 = this.statement_List.indexOf(statementCurr);
                Statement_Context _get_2 = this.statement_List.get(_indexOf_5);
                String[] _params_4 = _get_2.getParams();
                int _indexOf_6 = ((List<String>)Conversions.doWrapArray(_params_4)).indexOf(p);
                _builder.append(_indexOf_6, "");
                _builder.append("] = new ParameterDescr(\"");
                _builder.append(p, "");
                _builder.append("\");");
                _builder.newLineIfNotEmpty();
              }
            }
            _builder.append("allEventParams.put(");
            int _indexOf_7 = this.statement_List.indexOf(statementCurr);
            _builder.append(_indexOf_7, "");
            _builder.append(", paramsOfStatement_");
            int _indexOf_8 = this.statement_List.indexOf(statementCurr);
            _builder.append(_indexOf_8, "");
            _builder.append(");");
            _builder.newLineIfNotEmpty();
            _builder.newLine();
          }
        }
      }
    }
    return _builder;
  }
  
  public int retrieveParam(final int statementNum, final String paramName) {
    int paramNumTemp = 100;
    String[] _get = this.allEventParams.get(Integer.valueOf(statementNum));
    for (final String s : _get) {
      boolean _equals = s.equals(paramName);
      if (_equals) {
        String[] _get_1 = this.allEventParams.get(Integer.valueOf(statementNum));
        int _indexOf = ((List<String>)Conversions.doWrapArray(_get_1)).indexOf(s);
        paramNumTemp = _indexOf;
      }
    }
    return paramNumTemp;
  }
  
  /**
   * _____Simple Expression Case_____
   */
  protected CharSequence _compileTerminalRight(final int statementNum, final ExpressionImpl term) {
    CharSequence _switchResult = null;
    boolean _matched = false;
    if (!_matched) {
      if (term instanceof IntConstantImpl) {
        final IntConstantImpl _intConstantImpl = (IntConstantImpl)term;
        _matched=true;
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("new NumberDescr(");
        int _value = _intConstantImpl.getValue();
        _builder.append(_value, "");
        _builder.append(")");
        _switchResult = _builder;
      }
    }
    if (!_matched) {
      if (term instanceof FloatConstantImpl) {
        final FloatConstantImpl _floatConstantImpl = (FloatConstantImpl)term;
        _matched=true;
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("new NumberDescr(");
        float _value = _floatConstantImpl.getValue();
        _builder.append(_value, "");
        _builder.append(")");
        _switchResult = _builder;
      }
    }
    if (!_matched) {
      if (term instanceof BoolConstantImpl) {
        final BoolConstantImpl _boolConstantImpl = (BoolConstantImpl)term;
        _matched=true;
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("new NumberDescr(");
        String _value = _boolConstantImpl.getValue();
        _builder.append(_value, "");
        _builder.append(")");
        _switchResult = _builder;
      }
    }
    return _switchResult;
  }
  
  protected CharSequence _compileTerminalLeft(final int statementNum, final ExpressionImpl term) {
    CharSequence _switchResult = null;
    boolean _matched = false;
    if (!_matched) {
      if (term instanceof IntConstantImpl) {
        final IntConstantImpl _intConstantImpl = (IntConstantImpl)term;
        _matched=true;
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("new NumberDescr(");
        int _value = _intConstantImpl.getValue();
        _builder.append(_value, "");
        _builder.append(")");
        _switchResult = _builder;
      }
    }
    if (!_matched) {
      if (term instanceof FloatConstantImpl) {
        final FloatConstantImpl _floatConstantImpl = (FloatConstantImpl)term;
        _matched=true;
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("new NumberDescr(");
        float _value = _floatConstantImpl.getValue();
        _builder.append(_value, "");
        _builder.append(")");
        _switchResult = _builder;
      }
    }
    if (!_matched) {
      if (term instanceof BoolConstantImpl) {
        final BoolConstantImpl _boolConstantImpl = (BoolConstantImpl)term;
        _matched=true;
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("new NumberDescr(");
        String _value = _boolConstantImpl.getValue();
        _builder.append(_value, "");
        _builder.append(")");
        _switchResult = _builder;
      }
    }
    return _switchResult;
  }
  
  protected CharSequence _compileTerminalRight(final int statementNum, final ReferenceTypeImpl term) {
    CharSequence _switchResult = null;
    boolean _matched = false;
    if (!_matched) {
      if (term instanceof EventFeatureImpl) {
        final EventFeatureImpl _eventFeatureImpl = (EventFeatureImpl)term;
        _matched=true;
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("paramsOfStatement_");
        _builder.append(statementNum, "");
        _builder.append("[");
        String _name = _eventFeatureImpl.getName();
        int _retrieveParam = this.retrieveParam(statementNum, _name);
        _builder.append(_retrieveParam, "");
        _builder.append("]");
        _switchResult = _builder;
      }
    }
    if (!_matched) {
      if (term instanceof FluentImpl) {
        final FluentImpl _fluentImpl = (FluentImpl)term;
        _matched=true;
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("new SampleDescr(\"");
        String _name = _fluentImpl.getName();
        _builder.append(_name, "");
        _builder.append("\")");
        _builder.newLineIfNotEmpty();
        _switchResult = _builder;
      }
    }
    return _switchResult;
  }
  
  protected CharSequence _compileTerminalLeft(final int statementNum, final ReferenceTypeImpl term) {
    CharSequence _switchResult = null;
    boolean _matched = false;
    if (!_matched) {
      if (term instanceof EventFeatureImpl) {
        final EventFeatureImpl _eventFeatureImpl = (EventFeatureImpl)term;
        _matched=true;
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("paramsOfStatement_");
        _builder.append(statementNum, "");
        _builder.append("[");
        String _name = _eventFeatureImpl.getName();
        int _retrieveParam = this.retrieveParam(statementNum, _name);
        _builder.append(_retrieveParam, "");
        _builder.append("]");
        _switchResult = _builder;
      }
    }
    if (!_matched) {
      if (term instanceof FluentImpl) {
        final FluentImpl _fluentImpl = (FluentImpl)term;
        _matched=true;
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("new SampleDescr(");
        String _name = _fluentImpl.getName();
        _builder.append(_name, "");
        _builder.append(")");
        _switchResult = _builder;
      }
    }
    return _switchResult;
  }
  
  /**
   * HARD Expression Case
   */
  protected CharSequence _compileRecExpr(final String eventName, final int statementNum, final String fluentName, final IntConstantImpl conditionExpr) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("new NumberDescr(");
    int _value = conditionExpr.getValue();
    _builder.append(_value, "");
    _builder.append(")");
    return _builder;
  }
  
  protected CharSequence _compileRecExpr(final String eventName, final int statementNum, final String fluentName, final FloatConstantImpl conditionExpr) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("new NumberDescr(");
    float _value = conditionExpr.getValue();
    _builder.append(_value, "");
    _builder.append(")");
    return _builder;
  }
  
  protected CharSequence _compileRecExpr(final String eventName, final int statementNum, final String fluentName, final BoolConstantImpl conditionExpr) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("new NumberDescr(");
    String _value = conditionExpr.getValue();
    _builder.append(_value, "");
    _builder.append(")");
    return _builder;
  }
  
  protected CharSequence _compileRecExpr(final String eventName, final int statementNum, final String fluentName, final ReferenceImpl conditionExpr) {
    StringConcatenation _builder = new StringConcatenation();
    {
      ReferenceType _ref = conditionExpr.getRef();
      EClass _eClass = _ref.eClass();
      String _name = _eClass.getName();
      boolean _contains = _name.contains("Feature");
      if (_contains) {
        _builder.append("paramsOfStatement_");
        _builder.append(statementNum, "");
        _builder.append("[");
        ReferenceType _ref_1 = conditionExpr.getRef();
        String _name_1 = _ref_1.getName();
        int _retrieveParam = this.retrieveParam(statementNum, _name_1);
        _builder.append(_retrieveParam, "");
        _builder.append("]");
        _builder.newLineIfNotEmpty();
      } else {
        _builder.append("new SampleDescr(\"");
        ReferenceType _ref_2 = conditionExpr.getRef();
        String _name_2 = _ref_2.getName();
        _builder.append(_name_2, "");
        _builder.append("\")");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  protected CharSequence _compileRecExpr(final String eventName, final int statementNum, final String fluentName, final PlusImpl conditionExpr) {
    StringConcatenation _builder = new StringConcatenation();
    {
      boolean _and = false;
      Expression _left = conditionExpr.getLeft();
      EClass _eClass = _left.eClass();
      String _name = _eClass.getName();
      boolean _contains = _name.contains("Constant");
      if (!_contains) {
        _and = false;
      } else {
        Expression _right = conditionExpr.getRight();
        EClass _eClass_1 = _right.eClass();
        String _name_1 = _eClass_1.getName();
        boolean _contains_1 = _name_1.contains("Constant");
        _and = (_contains && _contains_1);
      }
      if (_and) {
        _builder.append("new PlusDescr( ");
        Expression _left_1 = conditionExpr.getLeft();
        CharSequence _compileTerminalLeft = this.compileTerminalLeft(statementNum, ((ExpressionImpl) _left_1));
        _builder.append(_compileTerminalLeft, "");
        _builder.append(",");
        Expression _right_1 = conditionExpr.getRight();
        CharSequence _compileTerminalLeft_1 = this.compileTerminalLeft(statementNum, ((ExpressionImpl) _right_1));
        _builder.append(_compileTerminalLeft_1, "");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
      } else {
        {
          Expression _left_2 = conditionExpr.getLeft();
          EClass _eClass_2 = _left_2.eClass();
          String _name_2 = _eClass_2.getName();
          boolean _contains_2 = _name_2.contains("Constant");
          if (_contains_2) {
            _builder.append("new PlusDescr(");
            Expression _left_3 = conditionExpr.getLeft();
            CharSequence _compileTerminalLeft_2 = this.compileTerminalLeft(statementNum, ((ExpressionImpl) _left_3));
            _builder.append(_compileTerminalLeft_2, "");
            _builder.append(",");
            Expression _right_2 = conditionExpr.getRight();
            Object _compileRecExpr = this.compileRecExpr(eventName, statementNum, fluentName, ((ExpressionImpl) _right_2));
            _builder.append(_compileRecExpr, "");
            _builder.append(")");
            _builder.newLineIfNotEmpty();
          }
        }
        {
          Expression _left_4 = conditionExpr.getLeft();
          EClass _eClass_3 = _left_4.eClass();
          String _name_3 = _eClass_3.getName();
          boolean _contains_3 = _name_3.contains("Constant");
          boolean _not = (!_contains_3);
          if (_not) {
            _builder.append("new PlusDescr(");
            Expression _left_5 = conditionExpr.getLeft();
            Object _compileRecExpr_1 = this.compileRecExpr(eventName, statementNum, fluentName, ((ExpressionImpl) _left_5));
            _builder.append(_compileRecExpr_1, "");
            _builder.append(",");
            Expression _right_3 = conditionExpr.getRight();
            Object _compileRecExpr_2 = this.compileRecExpr(eventName, statementNum, fluentName, ((ExpressionImpl) _right_3));
            _builder.append(_compileRecExpr_2, "");
            _builder.append(")");
          }
        }
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  protected CharSequence _compileRecExpr(final String eventName, final int statementNum, final String fluentName, final MinusImpl conditionExpr) {
    StringConcatenation _builder = new StringConcatenation();
    {
      boolean _and = false;
      Expression _left = conditionExpr.getLeft();
      EClass _eClass = _left.eClass();
      String _name = _eClass.getName();
      boolean _contains = _name.contains("Constant");
      if (!_contains) {
        _and = false;
      } else {
        Expression _right = conditionExpr.getRight();
        EClass _eClass_1 = _right.eClass();
        String _name_1 = _eClass_1.getName();
        boolean _contains_1 = _name_1.contains("Constant");
        _and = (_contains && _contains_1);
      }
      if (_and) {
        _builder.append("new MinusDescr( ");
        Expression _left_1 = conditionExpr.getLeft();
        CharSequence _compileTerminalLeft = this.compileTerminalLeft(statementNum, ((ExpressionImpl) _left_1));
        _builder.append(_compileTerminalLeft, "");
        _builder.append(",");
        Expression _right_1 = conditionExpr.getRight();
        CharSequence _compileTerminalLeft_1 = this.compileTerminalLeft(statementNum, ((ExpressionImpl) _right_1));
        _builder.append(_compileTerminalLeft_1, "");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
      } else {
        {
          Expression _left_2 = conditionExpr.getLeft();
          EClass _eClass_2 = _left_2.eClass();
          String _name_2 = _eClass_2.getName();
          boolean _contains_2 = _name_2.contains("Constant");
          if (_contains_2) {
            _builder.append("new MinusDescr(");
            Expression _left_3 = conditionExpr.getLeft();
            CharSequence _compileTerminalLeft_2 = this.compileTerminalLeft(statementNum, ((ExpressionImpl) _left_3));
            _builder.append(_compileTerminalLeft_2, "");
            _builder.append(",");
            Expression _right_2 = conditionExpr.getRight();
            Object _compileRecExpr = this.compileRecExpr(eventName, statementNum, fluentName, ((ExpressionImpl) _right_2));
            _builder.append(_compileRecExpr, "");
            _builder.append(")");
            _builder.newLineIfNotEmpty();
          }
        }
        {
          Expression _left_4 = conditionExpr.getLeft();
          EClass _eClass_3 = _left_4.eClass();
          String _name_3 = _eClass_3.getName();
          boolean _contains_3 = _name_3.contains("Constant");
          boolean _not = (!_contains_3);
          if (_not) {
            _builder.append("new MinusDescr(");
            Expression _left_5 = conditionExpr.getLeft();
            Object _compileRecExpr_1 = this.compileRecExpr(eventName, statementNum, fluentName, ((ExpressionImpl) _left_5));
            _builder.append(_compileRecExpr_1, "");
            _builder.append(",");
            Expression _right_3 = conditionExpr.getRight();
            Object _compileRecExpr_2 = this.compileRecExpr(eventName, statementNum, fluentName, ((ExpressionImpl) _right_3));
            _builder.append(_compileRecExpr_2, "");
            _builder.append(")");
          }
        }
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  protected CharSequence _compileRecExpr(final String eventName, final int statementNum, final String fluentName, final MulOrDivImpl conditionExpr) {
    StringConcatenation _builder = new StringConcatenation();
    {
      String _op = conditionExpr.getOp();
      boolean _equals = _op.equals("*");
      if (_equals) {
        {
          boolean _and = false;
          Expression _left = conditionExpr.getLeft();
          EClass _eClass = _left.eClass();
          String _name = _eClass.getName();
          boolean _contains = _name.contains("Constant");
          if (!_contains) {
            _and = false;
          } else {
            Expression _right = conditionExpr.getRight();
            EClass _eClass_1 = _right.eClass();
            String _name_1 = _eClass_1.getName();
            boolean _contains_1 = _name_1.contains("Constant");
            _and = (_contains && _contains_1);
          }
          if (_and) {
            _builder.append("new TimesDescr( ");
            Expression _left_1 = conditionExpr.getLeft();
            CharSequence _compileTerminalLeft = this.compileTerminalLeft(statementNum, ((ExpressionImpl) _left_1));
            _builder.append(_compileTerminalLeft, "");
            _builder.append(",");
            Expression _right_1 = conditionExpr.getRight();
            CharSequence _compileTerminalLeft_1 = this.compileTerminalLeft(statementNum, ((ExpressionImpl) _right_1));
            _builder.append(_compileTerminalLeft_1, "");
            _builder.append(")");
            _builder.newLineIfNotEmpty();
          } else {
            {
              Expression _left_2 = conditionExpr.getLeft();
              EClass _eClass_2 = _left_2.eClass();
              String _name_2 = _eClass_2.getName();
              boolean _contains_2 = _name_2.contains("Constant");
              if (_contains_2) {
                _builder.append("new TimesDescr(");
                Expression _left_3 = conditionExpr.getLeft();
                CharSequence _compileTerminalLeft_2 = this.compileTerminalLeft(statementNum, ((ExpressionImpl) _left_3));
                _builder.append(_compileTerminalLeft_2, "");
                _builder.append(",");
                Expression _right_2 = conditionExpr.getRight();
                Object _compileRecExpr = this.compileRecExpr(eventName, statementNum, fluentName, ((ExpressionImpl) _right_2));
                _builder.append(_compileRecExpr, "");
                _builder.append(")");
                _builder.newLineIfNotEmpty();
              }
            }
            {
              Expression _left_4 = conditionExpr.getLeft();
              EClass _eClass_3 = _left_4.eClass();
              String _name_3 = _eClass_3.getName();
              boolean _contains_3 = _name_3.contains("Constant");
              boolean _not = (!_contains_3);
              if (_not) {
                _builder.append("new TimesDescr(");
                Expression _left_5 = conditionExpr.getLeft();
                Object _compileRecExpr_1 = this.compileRecExpr(eventName, statementNum, fluentName, ((ExpressionImpl) _left_5));
                _builder.append(_compileRecExpr_1, "");
                _builder.append(",");
                Expression _right_3 = conditionExpr.getRight();
                Object _compileRecExpr_2 = this.compileRecExpr(eventName, statementNum, fluentName, ((ExpressionImpl) _right_3));
                _builder.append(_compileRecExpr_2, "");
                _builder.append(")");
              }
            }
            _builder.newLineIfNotEmpty();
          }
        }
      } else {
        {
          boolean _and_1 = false;
          Expression _left_6 = conditionExpr.getLeft();
          EClass _eClass_4 = _left_6.eClass();
          String _name_4 = _eClass_4.getName();
          boolean _contains_4 = _name_4.contains("Constant");
          if (!_contains_4) {
            _and_1 = false;
          } else {
            Expression _right_4 = conditionExpr.getRight();
            EClass _eClass_5 = _right_4.eClass();
            String _name_5 = _eClass_5.getName();
            boolean _contains_5 = _name_5.contains("Constant");
            _and_1 = (_contains_4 && _contains_5);
          }
          if (_and_1) {
            _builder.append("new ObelusDescr( ");
            Expression _left_7 = conditionExpr.getLeft();
            CharSequence _compileTerminalLeft_3 = this.compileTerminalLeft(statementNum, ((ExpressionImpl) _left_7));
            _builder.append(_compileTerminalLeft_3, "");
            _builder.append(",");
            Expression _right_5 = conditionExpr.getRight();
            CharSequence _compileTerminalLeft_4 = this.compileTerminalLeft(statementNum, ((ExpressionImpl) _right_5));
            _builder.append(_compileTerminalLeft_4, "");
            _builder.append(")");
            _builder.newLineIfNotEmpty();
          } else {
            {
              Expression _left_8 = conditionExpr.getLeft();
              EClass _eClass_6 = _left_8.eClass();
              String _name_6 = _eClass_6.getName();
              boolean _contains_6 = _name_6.contains("Constant");
              if (_contains_6) {
                _builder.append("new ObelusDescr(");
                Expression _left_9 = conditionExpr.getLeft();
                CharSequence _compileTerminalLeft_5 = this.compileTerminalLeft(statementNum, ((ExpressionImpl) _left_9));
                _builder.append(_compileTerminalLeft_5, "");
                _builder.append(",");
                Expression _right_6 = conditionExpr.getRight();
                Object _compileRecExpr_3 = this.compileRecExpr(eventName, statementNum, fluentName, ((ExpressionImpl) _right_6));
                _builder.append(_compileRecExpr_3, "");
                _builder.append(")");
                _builder.newLineIfNotEmpty();
              }
            }
            {
              Expression _left_10 = conditionExpr.getLeft();
              EClass _eClass_7 = _left_10.eClass();
              String _name_7 = _eClass_7.getName();
              boolean _contains_7 = _name_7.contains("Constant");
              boolean _not_1 = (!_contains_7);
              if (_not_1) {
                _builder.append("new ObelusDescr(");
                Expression _left_11 = conditionExpr.getLeft();
                Object _compileRecExpr_4 = this.compileRecExpr(eventName, statementNum, fluentName, ((ExpressionImpl) _left_11));
                _builder.append(_compileRecExpr_4, "");
                _builder.append(",");
                Expression _right_7 = conditionExpr.getRight();
                Object _compileRecExpr_5 = this.compileRecExpr(eventName, statementNum, fluentName, ((ExpressionImpl) _right_7));
                _builder.append(_compileRecExpr_5, "");
                _builder.append(")");
              }
            }
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    return _builder;
  }
  
  /**
   * FIRST compile call Case
   */
  public CharSequence compileExpr(final String eventName, final int statementNum, final String fluentName, final ExpressionImpl conditionExpr) {
    CharSequence _xblockexpression = null;
    {
      Expression espr = conditionExpr.getExpression();
      CharSequence _switchResult = null;
      boolean _matched = false;
      if (!_matched) {
        if (espr instanceof ReferenceImpl) {
          final ReferenceImpl _referenceImpl = (ReferenceImpl)espr;
          _matched=true;
          StringConcatenation _builder = new StringConcatenation();
          {
            ReferenceType _ref = _referenceImpl.getRef();
            EClass _eClass = _ref.eClass();
            String _name = _eClass.getName();
            boolean _contains = _name.contains("Feature");
            if (_contains) {
              _builder.append("exprContainer = paramsOfStatement_");
              _builder.append(statementNum, "");
              _builder.append("[");
              ReferenceType _ref_1 = _referenceImpl.getRef();
              String _name_1 = _ref_1.getName();
              int _retrieveParam = this.retrieveParam(statementNum, _name_1);
              _builder.append(_retrieveParam, "");
              _builder.append("];");
              _builder.newLineIfNotEmpty();
              _builder.newLine();
              {
                Statement_Context _get = this.statement_List.get(statementNum);
                Object _condition = _get.getCondition(fluentName);
                boolean _notEquals = (!Objects.equal(_condition, null));
                if (_notEquals) {
                  Statement_Context _get_1 = this.statement_List.get(statementNum);
                  Object _condition_1 = _get_1.getCondition(fluentName);
                  CharSequence _compileCond = this.compileCond(eventName, statementNum, fluentName, ((ExpressionImpl) _condition_1));
                  _builder.append(_compileCond, "");
                  _builder.newLineIfNotEmpty();
                } else {
                  CharSequence _compileContextEffect = this.compileContextEffect(eventName, statementNum, fluentName, null);
                  _builder.append(_compileContextEffect, "");
                  _builder.newLineIfNotEmpty();
                }
              }
            } else {
              _builder.append("exprContainer = new SampleDescr(\"");
              ReferenceType _ref_2 = _referenceImpl.getRef();
              String _name_2 = _ref_2.getName();
              _builder.append(_name_2, "");
              _builder.append("\");");
              _builder.newLineIfNotEmpty();
              _builder.newLine();
              {
                Statement_Context _get_2 = this.statement_List.get(statementNum);
                Object _condition_2 = _get_2.getCondition(fluentName);
                boolean _notEquals_1 = (!Objects.equal(_condition_2, null));
                if (_notEquals_1) {
                  Statement_Context _get_3 = this.statement_List.get(statementNum);
                  Object _condition_3 = _get_3.getCondition(fluentName);
                  CharSequence _compileCond_1 = this.compileCond(eventName, statementNum, fluentName, ((ExpressionImpl) _condition_3));
                  _builder.append(_compileCond_1, "");
                  _builder.newLineIfNotEmpty();
                } else {
                  CharSequence _compileContextEffect_1 = this.compileContextEffect(eventName, statementNum, fluentName, null);
                  _builder.append(_compileContextEffect_1, "");
                  _builder.newLineIfNotEmpty();
                }
              }
            }
          }
          _switchResult = _builder;
        }
      }
      if (!_matched) {
        if (espr instanceof IntConstantImpl) {
          final IntConstantImpl _intConstantImpl = (IntConstantImpl)espr;
          _matched=true;
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("exprContainer = new NumberDescr(");
          int _value = _intConstantImpl.getValue();
          _builder.append(_value, "");
          _builder.append(");");
          _builder.newLineIfNotEmpty();
          _builder.newLine();
          {
            Statement_Context _get = this.statement_List.get(statementNum);
            Object _condition = _get.getCondition(fluentName);
            boolean _notEquals = (!Objects.equal(_condition, null));
            if (_notEquals) {
              Statement_Context _get_1 = this.statement_List.get(statementNum);
              Object _condition_1 = _get_1.getCondition(fluentName);
              CharSequence _compileCond = this.compileCond(eventName, statementNum, fluentName, ((ExpressionImpl) _condition_1));
              _builder.append(_compileCond, "");
              _builder.newLineIfNotEmpty();
            } else {
              CharSequence _compileContextEffect = this.compileContextEffect(eventName, statementNum, fluentName, null);
              _builder.append(_compileContextEffect, "");
              _builder.newLineIfNotEmpty();
            }
          }
          _switchResult = _builder;
        }
      }
      if (!_matched) {
        if (espr instanceof FloatConstantImpl) {
          final FloatConstantImpl _floatConstantImpl = (FloatConstantImpl)espr;
          _matched=true;
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("exprContainer = new NumberDescr(");
          float _value = _floatConstantImpl.getValue();
          _builder.append(_value, "");
          _builder.append(");");
          _builder.newLineIfNotEmpty();
          _builder.newLine();
          {
            Statement_Context _get = this.statement_List.get(statementNum);
            Object _condition = _get.getCondition(fluentName);
            boolean _notEquals = (!Objects.equal(_condition, null));
            if (_notEquals) {
              Statement_Context _get_1 = this.statement_List.get(statementNum);
              Object _condition_1 = _get_1.getCondition(fluentName);
              CharSequence _compileCond = this.compileCond(eventName, statementNum, fluentName, ((ExpressionImpl) _condition_1));
              _builder.append(_compileCond, "");
              _builder.newLineIfNotEmpty();
            } else {
              CharSequence _compileContextEffect = this.compileContextEffect(eventName, statementNum, fluentName, null);
              _builder.append(_compileContextEffect, "");
              _builder.newLineIfNotEmpty();
            }
          }
          _switchResult = _builder;
        }
      }
      if (!_matched) {
        if (espr instanceof PlusImpl) {
          final PlusImpl _plusImpl = (PlusImpl)espr;
          _matched=true;
          StringConcatenation _builder = new StringConcatenation();
          {
            boolean _and = false;
            Expression _left = _plusImpl.getLeft();
            EClass _eClass = _left.eClass();
            String _name = _eClass.getName();
            boolean _contains = _name.contains("Constant");
            if (!_contains) {
              _and = false;
            } else {
              Expression _right = _plusImpl.getRight();
              EClass _eClass_1 = _right.eClass();
              String _name_1 = _eClass_1.getName();
              boolean _contains_1 = _name_1.contains("Constant");
              _and = (_contains && _contains_1);
            }
            if (_and) {
              _builder.newLine();
              _builder.append("exprContainer = new PlusDescr( ");
              Expression _left_1 = _plusImpl.getLeft();
              CharSequence _compileTerminalLeft = this.compileTerminalLeft(statementNum, ((ExpressionImpl) _left_1));
              _builder.append(_compileTerminalLeft, "");
              _builder.append(",");
              Expression _right_1 = _plusImpl.getRight();
              CharSequence _compileTerminalRight = this.compileTerminalRight(statementNum, ((ExpressionImpl) _right_1));
              _builder.append(_compileTerminalRight, "");
              _builder.append(");");
              _builder.newLineIfNotEmpty();
            } else {
              {
                Expression _left_2 = _plusImpl.getLeft();
                EClass _eClass_2 = _left_2.eClass();
                String _name_2 = _eClass_2.getName();
                boolean _contains_2 = _name_2.contains("Constant");
                if (_contains_2) {
                  _builder.append("exprContainer = new PlusDescr(");
                  Expression _left_3 = _plusImpl.getLeft();
                  CharSequence _compileTerminalLeft_1 = this.compileTerminalLeft(statementNum, ((ExpressionImpl) _left_3));
                  _builder.append(_compileTerminalLeft_1, "");
                  _builder.append(",");
                  Expression _right_2 = _plusImpl.getRight();
                  CharSequence _compileRecExpr = this.compileRecExpr(eventName, statementNum, fluentName, ((ExpressionImpl) _right_2));
                  _builder.append(_compileRecExpr, "");
                  _builder.append(");");
                  _builder.newLineIfNotEmpty();
                }
              }
              {
                Expression _left_4 = _plusImpl.getLeft();
                EClass _eClass_3 = _left_4.eClass();
                String _name_3 = _eClass_3.getName();
                boolean _contains_3 = _name_3.contains("Constant");
                boolean _not = (!_contains_3);
                if (_not) {
                  _builder.append("exprContainer = new PlusDescr(");
                  Expression _left_5 = _plusImpl.getLeft();
                  CharSequence _compileRecExpr_1 = this.compileRecExpr(eventName, statementNum, fluentName, ((ExpressionImpl) _left_5));
                  _builder.append(_compileRecExpr_1, "");
                  _builder.append(",");
                  Expression _right_3 = _plusImpl.getRight();
                  CharSequence _compileRecExpr_2 = this.compileRecExpr(eventName, statementNum, fluentName, ((ExpressionImpl) _right_3));
                  _builder.append(_compileRecExpr_2, "");
                  _builder.append(");");
                  _builder.newLineIfNotEmpty();
                }
              }
            }
          }
          _builder.newLine();
          {
            Statement_Context _get = this.statement_List.get(statementNum);
            Object _condition = _get.getCondition(fluentName);
            boolean _notEquals = (!Objects.equal(_condition, null));
            if (_notEquals) {
              Statement_Context _get_1 = this.statement_List.get(statementNum);
              Object _condition_1 = _get_1.getCondition(fluentName);
              CharSequence _compileCond = this.compileCond(eventName, statementNum, fluentName, ((ExpressionImpl) _condition_1));
              _builder.append(_compileCond, "");
              _builder.newLineIfNotEmpty();
            } else {
              {
                Statement_Context _get_2 = this.statement_List.get(statementNum);
                Object _time = _get_2.getTime(fluentName);
                boolean _notEquals_1 = (!Objects.equal(_time, null));
                if (_notEquals_1) {
                  Statement_Context _get_3 = this.statement_List.get(statementNum);
                  Object _time_1 = _get_3.getTime(fluentName);
                  CharSequence _compileTime = this.compileTime(eventName, statementNum, fluentName, ((InExprImpl) _time_1));
                  _builder.append(_compileTime, "");
                  _builder.newLineIfNotEmpty();
                } else {
                  CharSequence _compileContextEffect = this.compileContextEffect(eventName, statementNum, fluentName, null);
                  _builder.append(_compileContextEffect, "");
                  _builder.newLineIfNotEmpty();
                }
              }
            }
          }
          _switchResult = _builder;
        }
      }
      if (!_matched) {
        if (espr instanceof MinusImpl) {
          final MinusImpl _minusImpl = (MinusImpl)espr;
          _matched=true;
          StringConcatenation _builder = new StringConcatenation();
          {
            boolean _and = false;
            Expression _left = _minusImpl.getLeft();
            EClass _eClass = _left.eClass();
            String _name = _eClass.getName();
            boolean _contains = _name.contains("Constant");
            if (!_contains) {
              _and = false;
            } else {
              Expression _right = _minusImpl.getRight();
              EClass _eClass_1 = _right.eClass();
              String _name_1 = _eClass_1.getName();
              boolean _contains_1 = _name_1.contains("Constant");
              _and = (_contains && _contains_1);
            }
            if (_and) {
              _builder.newLine();
              _builder.append("exprContainer =  new MinusDescr( ");
              Expression _left_1 = _minusImpl.getLeft();
              CharSequence _compileTerminalLeft = this.compileTerminalLeft(statementNum, ((ExpressionImpl) _left_1));
              _builder.append(_compileTerminalLeft, "");
              _builder.append(",");
              Expression _right_1 = _minusImpl.getRight();
              CharSequence _compileTerminalRight = this.compileTerminalRight(statementNum, ((ExpressionImpl) _right_1));
              _builder.append(_compileTerminalRight, "");
              _builder.append(");");
              _builder.newLineIfNotEmpty();
            } else {
              {
                Expression _left_2 = _minusImpl.getLeft();
                EClass _eClass_2 = _left_2.eClass();
                String _name_2 = _eClass_2.getName();
                boolean _contains_2 = _name_2.contains("Constant");
                if (_contains_2) {
                  _builder.append("exprContainer = new MinusDescr(");
                  Expression _left_3 = _minusImpl.getLeft();
                  CharSequence _compileTerminalLeft_1 = this.compileTerminalLeft(statementNum, ((ExpressionImpl) _left_3));
                  _builder.append(_compileTerminalLeft_1, "");
                  _builder.append(",");
                  Expression _right_2 = _minusImpl.getRight();
                  CharSequence _compileRecExpr = this.compileRecExpr(eventName, statementNum, fluentName, ((ExpressionImpl) _right_2));
                  _builder.append(_compileRecExpr, "");
                  _builder.append(");");
                  _builder.newLineIfNotEmpty();
                }
              }
              {
                Expression _left_4 = _minusImpl.getLeft();
                EClass _eClass_3 = _left_4.eClass();
                String _name_3 = _eClass_3.getName();
                boolean _contains_3 = _name_3.contains("Constant");
                boolean _not = (!_contains_3);
                if (_not) {
                  _builder.append("exprContainer = new MinusDescr(");
                  Expression _left_5 = _minusImpl.getLeft();
                  CharSequence _compileRecExpr_1 = this.compileRecExpr(eventName, statementNum, fluentName, ((ExpressionImpl) _left_5));
                  _builder.append(_compileRecExpr_1, "");
                  _builder.append(",");
                  Expression _right_3 = _minusImpl.getRight();
                  CharSequence _compileRecExpr_2 = this.compileRecExpr(eventName, statementNum, fluentName, ((ExpressionImpl) _right_3));
                  _builder.append(_compileRecExpr_2, "");
                  _builder.append(");");
                  _builder.newLineIfNotEmpty();
                }
              }
            }
          }
          _builder.newLine();
          {
            Statement_Context _get = this.statement_List.get(statementNum);
            Object _condition = _get.getCondition(fluentName);
            boolean _notEquals = (!Objects.equal(_condition, null));
            if (_notEquals) {
              Statement_Context _get_1 = this.statement_List.get(statementNum);
              Object _condition_1 = _get_1.getCondition(fluentName);
              CharSequence _compileCond = this.compileCond(eventName, statementNum, fluentName, ((ExpressionImpl) _condition_1));
              _builder.append(_compileCond, "");
              _builder.newLineIfNotEmpty();
            } else {
              CharSequence _compileContextEffect = this.compileContextEffect(eventName, statementNum, fluentName, null);
              _builder.append(_compileContextEffect, "");
              _builder.newLineIfNotEmpty();
            }
          }
          _switchResult = _builder;
        }
      }
      if (!_matched) {
        if (espr instanceof MulOrDivImpl) {
          final MulOrDivImpl _mulOrDivImpl = (MulOrDivImpl)espr;
          _matched=true;
          StringConcatenation _builder = new StringConcatenation();
          {
            String _op = _mulOrDivImpl.getOp();
            boolean _equals = _op.equals("*");
            if (_equals) {
              {
                boolean _and = false;
                Expression _left = _mulOrDivImpl.getLeft();
                EClass _eClass = _left.eClass();
                String _name = _eClass.getName();
                boolean _contains = _name.contains("Constant");
                if (!_contains) {
                  _and = false;
                } else {
                  Expression _right = _mulOrDivImpl.getRight();
                  EClass _eClass_1 = _right.eClass();
                  String _name_1 = _eClass_1.getName();
                  boolean _contains_1 = _name_1.contains("Constant");
                  _and = (_contains && _contains_1);
                }
                if (_and) {
                  _builder.newLine();
                  _builder.append("exprContainer = new TimesDescr( ");
                  Expression _left_1 = _mulOrDivImpl.getLeft();
                  CharSequence _compileTerminalLeft = this.compileTerminalLeft(statementNum, ((ExpressionImpl) _left_1));
                  _builder.append(_compileTerminalLeft, "");
                  _builder.append(",");
                  Expression _right_1 = _mulOrDivImpl.getRight();
                  CharSequence _compileTerminalRight = this.compileTerminalRight(statementNum, ((ExpressionImpl) _right_1));
                  _builder.append(_compileTerminalRight, "");
                  _builder.append(");");
                  _builder.newLineIfNotEmpty();
                } else {
                  {
                    Expression _left_2 = _mulOrDivImpl.getLeft();
                    EClass _eClass_2 = _left_2.eClass();
                    String _name_2 = _eClass_2.getName();
                    boolean _contains_2 = _name_2.contains("Constant");
                    if (_contains_2) {
                      _builder.append("exprContainer = new TimesDescr(");
                      Expression _left_3 = _mulOrDivImpl.getLeft();
                      CharSequence _compileTerminalLeft_1 = this.compileTerminalLeft(statementNum, ((ExpressionImpl) _left_3));
                      _builder.append(_compileTerminalLeft_1, "");
                      _builder.append(",");
                      Expression _right_2 = _mulOrDivImpl.getRight();
                      CharSequence _compileRecExpr = this.compileRecExpr(eventName, statementNum, fluentName, ((ExpressionImpl) _right_2));
                      _builder.append(_compileRecExpr, "");
                      _builder.append(");");
                      _builder.newLineIfNotEmpty();
                    }
                  }
                  {
                    Expression _left_4 = _mulOrDivImpl.getLeft();
                    EClass _eClass_3 = _left_4.eClass();
                    String _name_3 = _eClass_3.getName();
                    boolean _contains_3 = _name_3.contains("Constant");
                    boolean _not = (!_contains_3);
                    if (_not) {
                      _builder.append("exprContainer = new TimesDescr(");
                      Expression _left_5 = _mulOrDivImpl.getLeft();
                      CharSequence _compileRecExpr_1 = this.compileRecExpr(eventName, statementNum, fluentName, ((ExpressionImpl) _left_5));
                      _builder.append(_compileRecExpr_1, "");
                      _builder.append(",");
                      Expression _right_3 = _mulOrDivImpl.getRight();
                      CharSequence _compileRecExpr_2 = this.compileRecExpr(eventName, statementNum, fluentName, ((ExpressionImpl) _right_3));
                      _builder.append(_compileRecExpr_2, "");
                      _builder.append(");");
                      _builder.newLineIfNotEmpty();
                    }
                  }
                }
              }
              _builder.newLine();
              {
                Statement_Context _get = this.statement_List.get(statementNum);
                Object _condition = _get.getCondition(fluentName);
                boolean _notEquals = (!Objects.equal(_condition, null));
                if (_notEquals) {
                  Statement_Context _get_1 = this.statement_List.get(statementNum);
                  Object _condition_1 = _get_1.getCondition(fluentName);
                  CharSequence _compileCond = this.compileCond(eventName, statementNum, fluentName, ((ExpressionImpl) _condition_1));
                  _builder.append(_compileCond, "");
                  _builder.newLineIfNotEmpty();
                } else {
                  CharSequence _compileContextEffect = this.compileContextEffect(eventName, statementNum, fluentName, null);
                  _builder.append(_compileContextEffect, "");
                  _builder.newLineIfNotEmpty();
                }
              }
            } else {
              {
                boolean _and_1 = false;
                Expression _left_6 = _mulOrDivImpl.getLeft();
                EClass _eClass_4 = _left_6.eClass();
                String _name_4 = _eClass_4.getName();
                boolean _contains_4 = _name_4.contains("Constant");
                if (!_contains_4) {
                  _and_1 = false;
                } else {
                  Expression _right_4 = _mulOrDivImpl.getRight();
                  EClass _eClass_5 = _right_4.eClass();
                  String _name_5 = _eClass_5.getName();
                  boolean _contains_5 = _name_5.contains("Constant");
                  _and_1 = (_contains_4 && _contains_5);
                }
                if (_and_1) {
                  _builder.newLine();
                  _builder.append("exprContainer = new ObelusDescr( ");
                  Expression _left_7 = _mulOrDivImpl.getLeft();
                  CharSequence _compileTerminalLeft_2 = this.compileTerminalLeft(statementNum, ((ExpressionImpl) _left_7));
                  _builder.append(_compileTerminalLeft_2, "");
                  _builder.append(",");
                  Expression _right_5 = _mulOrDivImpl.getRight();
                  CharSequence _compileTerminalRight_1 = this.compileTerminalRight(statementNum, ((ExpressionImpl) _right_5));
                  _builder.append(_compileTerminalRight_1, "");
                  _builder.append(");");
                  _builder.newLineIfNotEmpty();
                } else {
                  {
                    Expression _left_8 = _mulOrDivImpl.getLeft();
                    EClass _eClass_6 = _left_8.eClass();
                    String _name_6 = _eClass_6.getName();
                    boolean _contains_6 = _name_6.contains("Constant");
                    if (_contains_6) {
                      _builder.append("exprContainer = new ObelusDescr(");
                      Expression _left_9 = _mulOrDivImpl.getLeft();
                      CharSequence _compileTerminalLeft_3 = this.compileTerminalLeft(statementNum, ((ExpressionImpl) _left_9));
                      _builder.append(_compileTerminalLeft_3, "");
                      _builder.append(",");
                      Expression _right_6 = _mulOrDivImpl.getRight();
                      CharSequence _compileRecExpr_3 = this.compileRecExpr(eventName, statementNum, fluentName, ((ExpressionImpl) _right_6));
                      _builder.append(_compileRecExpr_3, "");
                      _builder.append(");");
                      _builder.newLineIfNotEmpty();
                    }
                  }
                  {
                    Expression _left_10 = _mulOrDivImpl.getLeft();
                    EClass _eClass_7 = _left_10.eClass();
                    String _name_7 = _eClass_7.getName();
                    boolean _contains_7 = _name_7.contains("Constant");
                    boolean _not_1 = (!_contains_7);
                    if (_not_1) {
                      _builder.append("exprContainer = new ObelusDescr(");
                      Expression _left_11 = _mulOrDivImpl.getLeft();
                      CharSequence _compileRecExpr_4 = this.compileRecExpr(eventName, statementNum, fluentName, ((ExpressionImpl) _left_11));
                      _builder.append(_compileRecExpr_4, "");
                      _builder.append(",");
                      Expression _right_7 = _mulOrDivImpl.getRight();
                      CharSequence _compileRecExpr_5 = this.compileRecExpr(eventName, statementNum, fluentName, ((ExpressionImpl) _right_7));
                      _builder.append(_compileRecExpr_5, "");
                      _builder.append(");");
                      _builder.newLineIfNotEmpty();
                    }
                  }
                }
              }
              _builder.newLine();
              {
                Statement_Context _get_2 = this.statement_List.get(statementNum);
                Object _condition_2 = _get_2.getCondition(fluentName);
                boolean _notEquals_1 = (!Objects.equal(_condition_2, null));
                if (_notEquals_1) {
                  Statement_Context _get_3 = this.statement_List.get(statementNum);
                  Object _condition_3 = _get_3.getCondition(fluentName);
                  CharSequence _compileCond_1 = this.compileCond(eventName, statementNum, fluentName, ((ExpressionImpl) _condition_3));
                  _builder.append(_compileCond_1, "");
                  _builder.newLineIfNotEmpty();
                } else {
                  CharSequence _compileContextEffect_1 = this.compileContextEffect(eventName, statementNum, fluentName, null);
                  _builder.append(_compileContextEffect_1, "");
                  _builder.newLineIfNotEmpty();
                }
              }
            }
          }
          _switchResult = _builder;
        }
      }
      if (!_matched) {
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("//default compileExpr ");
        EClass _eClass = espr.eClass();
        _builder.append(_eClass, "");
        _switchResult = _builder;
      }
      _xblockexpression = (_switchResult);
    }
    return _xblockexpression;
  }
  
  public CharSequence compileContextEffect(final String eventName, final int statementNum, final String fluentName, final String opCond) {
    StringConcatenation _builder = new StringConcatenation();
    {
      boolean _notEquals = (!Objects.equal(opCond, null));
      if (_notEquals) {
        _builder.append("contextContainer = new ContextImpl(paramsOfStatement_");
        _builder.append(statementNum, "");
        _builder.append(", exprContainer, condContainer );");
        _builder.newLineIfNotEmpty();
      } else {
        _builder.append("contextContainer = new ContextImpl(paramsOfStatement_");
        _builder.append(statementNum, "");
        _builder.append(",exprContainer , null);");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    _builder.append("effectContainer = new EffectImpl(\"");
    _builder.append(fluentName, "");
    _builder.append("\", contextContainer);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("effects.add(effectContainer);");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("model.add(\"");
    _builder.append(eventName, "");
    _builder.append("\", (Effect[]) effects.toArray());");
    _builder.newLineIfNotEmpty();
    _builder.append("effects.clear();");
    _builder.newLine();
    _builder.append(" ");
    _builder.newLine();
    return _builder;
  }
  
  /**
   * FIRST Time Compile
   */
  public CharSequence compileTime(final String eventName, final int statementNum, final String fluentName, final InExprImpl conditionExpr) {
    CharSequence _xblockexpression = null;
    {
      InExpr time = conditionExpr.getInTimeExpr();
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("compile TIME");
      _xblockexpression = (_builder);
    }
    return _xblockexpression;
  }
  
  /**
   * FIRST Condition Compile
   */
  public CharSequence compileCond(final String eventName, final int statementNum, final String fluentName, final ExpressionImpl conditionExpr) {
    CharSequence _xblockexpression = null;
    {
      Expression cond = conditionExpr.getCondition();
      CharSequence _switchResult = null;
      boolean _matched = false;
      if (!_matched) {
        if (cond instanceof NotImpl) {
          final NotImpl _notImpl = (NotImpl)cond;
          _matched=true;
          StringConcatenation _builder = new StringConcatenation();
          {
            Expression _expression = _notImpl.getExpression();
            EClass _eClass = _expression.eClass();
            String _name = _eClass.getName();
            boolean _equals = _name.equals("Constant");
            if (_equals) {
              _builder.append("condContainer = new NotDescr( ");
              Expression _expression_1 = _notImpl.getExpression();
              CharSequence _compileTerminalLeft = this.compileTerminalLeft(statementNum, ((ExpressionImpl) _expression_1));
              _builder.append(_compileTerminalLeft, "");
              _builder.append(");");
              _builder.newLineIfNotEmpty();
            } else {
              _builder.append("condContainer = new NotDescr(");
              Expression _expression_2 = _notImpl.getExpression();
              CharSequence _compileRecExpr = this.compileRecExpr(eventName, statementNum, fluentName, ((ExpressionImpl) _expression_2));
              _builder.append(_compileRecExpr, "");
              _builder.append(");");
              _builder.newLineIfNotEmpty();
            }
          }
          _builder.newLine();
          CharSequence _compileContextEffect = this.compileContextEffect(eventName, statementNum, fluentName, "Not");
          _builder.append(_compileContextEffect, "");
          _builder.newLineIfNotEmpty();
          _switchResult = _builder;
        }
      }
      if (!_matched) {
        if (cond instanceof OrImpl) {
          final OrImpl _orImpl = (OrImpl)cond;
          _matched=true;
          StringConcatenation _builder = new StringConcatenation();
          {
            boolean _and = false;
            Expression _left = _orImpl.getLeft();
            EClass _eClass = _left.eClass();
            String _name = _eClass.getName();
            boolean _contains = _name.contains("Constant");
            if (!_contains) {
              _and = false;
            } else {
              Expression _right = _orImpl.getRight();
              EClass _eClass_1 = _right.eClass();
              String _name_1 = _eClass_1.getName();
              boolean _contains_1 = _name_1.contains("Constant");
              _and = (_contains && _contains_1);
            }
            if (_and) {
              _builder.append("condContainer = new OrDescr( ");
              Expression _left_1 = _orImpl.getLeft();
              CharSequence _compileTerminalLeft = this.compileTerminalLeft(statementNum, ((ExpressionImpl) _left_1));
              _builder.append(_compileTerminalLeft, "");
              _builder.append(",");
              Expression _right_1 = _orImpl.getRight();
              CharSequence _compileTerminalRight = this.compileTerminalRight(statementNum, ((ExpressionImpl) _right_1));
              _builder.append(_compileTerminalRight, "");
              _builder.append(");");
              _builder.newLineIfNotEmpty();
            } else {
              {
                Expression _left_2 = _orImpl.getLeft();
                EClass _eClass_2 = _left_2.eClass();
                String _name_2 = _eClass_2.getName();
                boolean _contains_2 = _name_2.contains("Constant");
                if (_contains_2) {
                  _builder.append("condContainer = new OrDescr(");
                  Expression _left_3 = _orImpl.getLeft();
                  CharSequence _compileTerminalLeft_1 = this.compileTerminalLeft(statementNum, ((ExpressionImpl) _left_3));
                  _builder.append(_compileTerminalLeft_1, "");
                  _builder.append(",");
                  Expression _right_2 = _orImpl.getRight();
                  CharSequence _compileRecExpr = this.compileRecExpr(eventName, statementNum, fluentName, ((ExpressionImpl) _right_2));
                  _builder.append(_compileRecExpr, "");
                  _builder.append(");");
                  _builder.newLineIfNotEmpty();
                }
              }
              {
                Expression _left_4 = _orImpl.getLeft();
                EClass _eClass_3 = _left_4.eClass();
                String _name_3 = _eClass_3.getName();
                boolean _contains_3 = _name_3.contains("Constant");
                boolean _not = (!_contains_3);
                if (_not) {
                  _builder.append("condContainer = new OrDescr(");
                  Expression _left_5 = _orImpl.getLeft();
                  CharSequence _compileRecExpr_1 = this.compileRecExpr(eventName, statementNum, fluentName, ((ExpressionImpl) _left_5));
                  _builder.append(_compileRecExpr_1, "");
                  _builder.append(",");
                  Expression _right_3 = _orImpl.getRight();
                  CharSequence _compileRecExpr_2 = this.compileRecExpr(eventName, statementNum, fluentName, ((ExpressionImpl) _right_3));
                  _builder.append(_compileRecExpr_2, "");
                  _builder.append(");");
                  _builder.newLineIfNotEmpty();
                }
              }
            }
          }
          _builder.newLine();
          CharSequence _compileContextEffect = this.compileContextEffect(eventName, statementNum, fluentName, "Or");
          _builder.append(_compileContextEffect, "");
          _builder.newLineIfNotEmpty();
          _switchResult = _builder;
        }
      }
      if (!_matched) {
        if (cond instanceof AndImpl) {
          final AndImpl _andImpl = (AndImpl)cond;
          _matched=true;
          StringConcatenation _builder = new StringConcatenation();
          {
            boolean _and = false;
            Expression _left = _andImpl.getLeft();
            EClass _eClass = _left.eClass();
            String _name = _eClass.getName();
            boolean _contains = _name.contains("Constant");
            if (!_contains) {
              _and = false;
            } else {
              Expression _right = _andImpl.getRight();
              EClass _eClass_1 = _right.eClass();
              String _name_1 = _eClass_1.getName();
              boolean _contains_1 = _name_1.contains("Constant");
              _and = (_contains && _contains_1);
            }
            if (_and) {
              _builder.append("condContainer = new AndDescr( ");
              Expression _left_1 = _andImpl.getLeft();
              CharSequence _compileTerminalLeft = this.compileTerminalLeft(statementNum, ((ExpressionImpl) _left_1));
              _builder.append(_compileTerminalLeft, "");
              _builder.append(",");
              Expression _right_1 = _andImpl.getRight();
              CharSequence _compileTerminalRight = this.compileTerminalRight(statementNum, ((ExpressionImpl) _right_1));
              _builder.append(_compileTerminalRight, "");
              _builder.append(");");
              _builder.newLineIfNotEmpty();
            } else {
              {
                Expression _left_2 = _andImpl.getLeft();
                EClass _eClass_2 = _left_2.eClass();
                String _name_2 = _eClass_2.getName();
                boolean _contains_2 = _name_2.contains("Constant");
                if (_contains_2) {
                  _builder.append("condContainer = new AndDescr(");
                  Expression _left_3 = _andImpl.getLeft();
                  CharSequence _compileTerminalLeft_1 = this.compileTerminalLeft(statementNum, ((ExpressionImpl) _left_3));
                  _builder.append(_compileTerminalLeft_1, "");
                  _builder.append(",");
                  Expression _right_2 = _andImpl.getRight();
                  CharSequence _compileRecExpr = this.compileRecExpr(eventName, statementNum, fluentName, ((ExpressionImpl) _right_2));
                  _builder.append(_compileRecExpr, "");
                  _builder.append(");");
                  _builder.newLineIfNotEmpty();
                }
              }
              {
                Expression _left_4 = _andImpl.getLeft();
                EClass _eClass_3 = _left_4.eClass();
                String _name_3 = _eClass_3.getName();
                boolean _contains_3 = _name_3.contains("Constant");
                boolean _not = (!_contains_3);
                if (_not) {
                  _builder.append("condContainer = new AndDescr(");
                  Expression _left_5 = _andImpl.getLeft();
                  CharSequence _compileRecExpr_1 = this.compileRecExpr(eventName, statementNum, fluentName, ((ExpressionImpl) _left_5));
                  _builder.append(_compileRecExpr_1, "");
                  _builder.append(",");
                  Expression _right_3 = _andImpl.getRight();
                  CharSequence _compileRecExpr_2 = this.compileRecExpr(eventName, statementNum, fluentName, ((ExpressionImpl) _right_3));
                  _builder.append(_compileRecExpr_2, "");
                  _builder.append(");");
                  _builder.newLineIfNotEmpty();
                }
              }
            }
          }
          _builder.newLine();
          CharSequence _compileContextEffect = this.compileContextEffect(eventName, statementNum, fluentName, "And");
          _builder.append(_compileContextEffect, "");
          _builder.newLineIfNotEmpty();
          _builder.newLine();
          _switchResult = _builder;
        }
      }
      if (!_matched) {
        if (cond instanceof EqualityImpl) {
          final EqualityImpl _equalityImpl = (EqualityImpl)cond;
          _matched=true;
          StringConcatenation _builder = new StringConcatenation();
          {
            String _op = _equalityImpl.getOp();
            boolean _equals = _op.equals("==");
            if (_equals) {
              {
                boolean _and = false;
                Expression _left = _equalityImpl.getLeft();
                EClass _eClass = _left.eClass();
                String _name = _eClass.getName();
                boolean _contains = _name.contains("Constant");
                if (!_contains) {
                  _and = false;
                } else {
                  Expression _right = _equalityImpl.getRight();
                  EClass _eClass_1 = _right.eClass();
                  String _name_1 = _eClass_1.getName();
                  boolean _contains_1 = _name_1.contains("Constant");
                  _and = (_contains && _contains_1);
                }
                if (_and) {
                  _builder.append("condContainer = new SameDescr( ");
                  Expression _left_1 = _equalityImpl.getLeft();
                  CharSequence _compileTerminalLeft = this.compileTerminalLeft(statementNum, ((ExpressionImpl) _left_1));
                  _builder.append(_compileTerminalLeft, "");
                  _builder.append(",");
                  Expression _right_1 = _equalityImpl.getRight();
                  CharSequence _compileTerminalRight = this.compileTerminalRight(statementNum, ((ExpressionImpl) _right_1));
                  _builder.append(_compileTerminalRight, "");
                  _builder.append(");");
                  _builder.newLineIfNotEmpty();
                } else {
                  {
                    Expression _left_2 = _equalityImpl.getLeft();
                    EClass _eClass_2 = _left_2.eClass();
                    String _name_2 = _eClass_2.getName();
                    boolean _contains_2 = _name_2.contains("Constant");
                    if (_contains_2) {
                      _builder.append("condContainer = new SameDescr(");
                      Expression _left_3 = _equalityImpl.getLeft();
                      CharSequence _compileTerminalLeft_1 = this.compileTerminalLeft(statementNum, ((ExpressionImpl) _left_3));
                      _builder.append(_compileTerminalLeft_1, "");
                      _builder.append(",");
                      Expression _right_2 = _equalityImpl.getRight();
                      CharSequence _compileRecExpr = this.compileRecExpr(eventName, statementNum, fluentName, ((ExpressionImpl) _right_2));
                      _builder.append(_compileRecExpr, "");
                      _builder.append(");");
                      _builder.newLineIfNotEmpty();
                    }
                  }
                  {
                    Expression _left_4 = _equalityImpl.getLeft();
                    EClass _eClass_3 = _left_4.eClass();
                    String _name_3 = _eClass_3.getName();
                    boolean _contains_3 = _name_3.contains("Constant");
                    boolean _not = (!_contains_3);
                    if (_not) {
                      _builder.append("condContainer = new SameDescr(");
                      Expression _left_5 = _equalityImpl.getLeft();
                      CharSequence _compileRecExpr_1 = this.compileRecExpr(eventName, statementNum, fluentName, ((ExpressionImpl) _left_5));
                      _builder.append(_compileRecExpr_1, "");
                      _builder.append(",");
                      Expression _right_3 = _equalityImpl.getRight();
                      CharSequence _compileRecExpr_2 = this.compileRecExpr(eventName, statementNum, fluentName, ((ExpressionImpl) _right_3));
                      _builder.append(_compileRecExpr_2, "");
                      _builder.append(");");
                      _builder.newLineIfNotEmpty();
                    }
                  }
                }
              }
              _builder.newLine();
              CharSequence _compileContextEffect = this.compileContextEffect(eventName, statementNum, fluentName, "Same");
              _builder.append(_compileContextEffect, "");
              _builder.newLineIfNotEmpty();
            } else {
              {
                boolean _and_1 = false;
                Expression _left_6 = _equalityImpl.getLeft();
                EClass _eClass_4 = _left_6.eClass();
                String _name_4 = _eClass_4.getName();
                boolean _contains_4 = _name_4.contains("Constant");
                if (!_contains_4) {
                  _and_1 = false;
                } else {
                  Expression _right_4 = _equalityImpl.getRight();
                  EClass _eClass_5 = _right_4.eClass();
                  String _name_5 = _eClass_5.getName();
                  boolean _contains_5 = _name_5.contains("Constant");
                  _and_1 = (_contains_4 && _contains_5);
                }
                if (_and_1) {
                  _builder.append("condContainer = new DifferentDescr( ");
                  Expression _left_7 = _equalityImpl.getLeft();
                  CharSequence _compileTerminalLeft_2 = this.compileTerminalLeft(statementNum, ((ExpressionImpl) _left_7));
                  _builder.append(_compileTerminalLeft_2, "");
                  _builder.append(",");
                  Expression _right_5 = _equalityImpl.getRight();
                  CharSequence _compileTerminalRight_1 = this.compileTerminalRight(statementNum, ((ExpressionImpl) _right_5));
                  _builder.append(_compileTerminalRight_1, "");
                  _builder.append(");");
                  _builder.newLineIfNotEmpty();
                } else {
                  {
                    Expression _left_8 = _equalityImpl.getLeft();
                    EClass _eClass_6 = _left_8.eClass();
                    String _name_6 = _eClass_6.getName();
                    boolean _contains_6 = _name_6.contains("Constant");
                    if (_contains_6) {
                      _builder.append("condContainer = new DifferentDescr(");
                      Expression _left_9 = _equalityImpl.getLeft();
                      CharSequence _compileTerminalLeft_3 = this.compileTerminalLeft(statementNum, ((ExpressionImpl) _left_9));
                      _builder.append(_compileTerminalLeft_3, "");
                      _builder.append(",");
                      Expression _right_6 = _equalityImpl.getRight();
                      CharSequence _compileRecExpr_3 = this.compileRecExpr(eventName, statementNum, fluentName, ((ExpressionImpl) _right_6));
                      _builder.append(_compileRecExpr_3, "");
                      _builder.append(");");
                      _builder.newLineIfNotEmpty();
                    }
                  }
                  {
                    Expression _left_10 = _equalityImpl.getLeft();
                    EClass _eClass_7 = _left_10.eClass();
                    String _name_7 = _eClass_7.getName();
                    boolean _contains_7 = _name_7.contains("Constant");
                    boolean _not_1 = (!_contains_7);
                    if (_not_1) {
                      _builder.append("condContainer = new DifferentDescr(");
                      Expression _left_11 = _equalityImpl.getLeft();
                      CharSequence _compileRecExpr_4 = this.compileRecExpr(eventName, statementNum, fluentName, ((ExpressionImpl) _left_11));
                      _builder.append(_compileRecExpr_4, "");
                      _builder.append(",");
                      Expression _right_7 = _equalityImpl.getRight();
                      CharSequence _compileRecExpr_5 = this.compileRecExpr(eventName, statementNum, fluentName, ((ExpressionImpl) _right_7));
                      _builder.append(_compileRecExpr_5, "");
                      _builder.append(");");
                      _builder.newLineIfNotEmpty();
                    }
                  }
                }
              }
              _builder.newLine();
              CharSequence _compileContextEffect_1 = this.compileContextEffect(eventName, statementNum, fluentName, "Different");
              _builder.append(_compileContextEffect_1, "");
              _builder.newLineIfNotEmpty();
            }
          }
          _switchResult = _builder;
        }
      }
      if (!_matched) {
        if (cond instanceof ComparisonImpl) {
          final ComparisonImpl _comparisonImpl = (ComparisonImpl)cond;
          _matched=true;
          StringConcatenation _builder = new StringConcatenation();
          {
            String _op = _comparisonImpl.getOp();
            boolean _equals = _op.equals(">=");
            if (_equals) {
              {
                boolean _and = false;
                Expression _left = _comparisonImpl.getLeft();
                EClass _eClass = _left.eClass();
                String _name = _eClass.getName();
                boolean _contains = _name.contains("Constant");
                if (!_contains) {
                  _and = false;
                } else {
                  Expression _right = _comparisonImpl.getRight();
                  EClass _eClass_1 = _right.eClass();
                  String _name_1 = _eClass_1.getName();
                  boolean _contains_1 = _name_1.contains("Constant");
                  _and = (_contains && _contains_1);
                }
                if (_and) {
                  _builder.append("condContainer = new MoreEqualsDescr( ");
                  Expression _left_1 = _comparisonImpl.getLeft();
                  CharSequence _compileTerminalLeft = this.compileTerminalLeft(statementNum, ((ExpressionImpl) _left_1));
                  _builder.append(_compileTerminalLeft, "");
                  _builder.append(",");
                  Expression _right_1 = _comparisonImpl.getRight();
                  CharSequence _compileTerminalRight = this.compileTerminalRight(statementNum, ((ExpressionImpl) _right_1));
                  _builder.append(_compileTerminalRight, "");
                  _builder.append(");");
                  _builder.newLineIfNotEmpty();
                } else {
                  {
                    Expression _left_2 = _comparisonImpl.getLeft();
                    EClass _eClass_2 = _left_2.eClass();
                    String _name_2 = _eClass_2.getName();
                    boolean _contains_2 = _name_2.contains("Constant");
                    if (_contains_2) {
                      _builder.append("condContainer = new MoreEqualsDescr(");
                      Expression _left_3 = _comparisonImpl.getLeft();
                      CharSequence _compileTerminalLeft_1 = this.compileTerminalLeft(statementNum, ((ExpressionImpl) _left_3));
                      _builder.append(_compileTerminalLeft_1, "");
                      _builder.append(",");
                      Expression _right_2 = _comparisonImpl.getRight();
                      CharSequence _compileRecExpr = this.compileRecExpr(eventName, statementNum, fluentName, ((ExpressionImpl) _right_2));
                      _builder.append(_compileRecExpr, "");
                      _builder.append(");");
                      _builder.newLineIfNotEmpty();
                    }
                  }
                  {
                    Expression _left_4 = _comparisonImpl.getLeft();
                    EClass _eClass_3 = _left_4.eClass();
                    String _name_3 = _eClass_3.getName();
                    boolean _contains_3 = _name_3.contains("Constant");
                    boolean _not = (!_contains_3);
                    if (_not) {
                      _builder.append("condContainer = new MoreEqualsDescr(");
                      Expression _left_5 = _comparisonImpl.getLeft();
                      CharSequence _compileRecExpr_1 = this.compileRecExpr(eventName, statementNum, fluentName, ((ExpressionImpl) _left_5));
                      _builder.append(_compileRecExpr_1, "");
                      _builder.append(",");
                      Expression _right_3 = _comparisonImpl.getRight();
                      CharSequence _compileRecExpr_2 = this.compileRecExpr(eventName, statementNum, fluentName, ((ExpressionImpl) _right_3));
                      _builder.append(_compileRecExpr_2, "");
                      _builder.append(");");
                      _builder.newLineIfNotEmpty();
                    }
                  }
                }
              }
              _builder.newLine();
              CharSequence _compileContextEffect = this.compileContextEffect(eventName, statementNum, fluentName, "MoreEquals");
              _builder.append(_compileContextEffect, "");
              _builder.newLineIfNotEmpty();
            } else {
              String _op_1 = _comparisonImpl.getOp();
              boolean _equals_1 = _op_1.equals("<=");
              if (_equals_1) {
                {
                  boolean _and_1 = false;
                  Expression _left_6 = _comparisonImpl.getLeft();
                  EClass _eClass_4 = _left_6.eClass();
                  String _name_4 = _eClass_4.getName();
                  boolean _contains_4 = _name_4.contains("Constant");
                  if (!_contains_4) {
                    _and_1 = false;
                  } else {
                    Expression _right_4 = _comparisonImpl.getRight();
                    EClass _eClass_5 = _right_4.eClass();
                    String _name_5 = _eClass_5.getName();
                    boolean _contains_5 = _name_5.contains("Constant");
                    _and_1 = (_contains_4 && _contains_5);
                  }
                  if (_and_1) {
                    _builder.append("condContainer = new LessEqualsDescr( ");
                    Expression _left_7 = _comparisonImpl.getLeft();
                    CharSequence _compileTerminalLeft_2 = this.compileTerminalLeft(statementNum, ((ExpressionImpl) _left_7));
                    _builder.append(_compileTerminalLeft_2, "");
                    _builder.append(",");
                    Expression _right_5 = _comparisonImpl.getRight();
                    CharSequence _compileTerminalRight_1 = this.compileTerminalRight(statementNum, ((ExpressionImpl) _right_5));
                    _builder.append(_compileTerminalRight_1, "");
                    _builder.append(");");
                    _builder.newLineIfNotEmpty();
                  } else {
                    {
                      Expression _left_8 = _comparisonImpl.getLeft();
                      EClass _eClass_6 = _left_8.eClass();
                      String _name_6 = _eClass_6.getName();
                      boolean _contains_6 = _name_6.contains("Constant");
                      if (_contains_6) {
                        _builder.append("condContainer = new LessEqualsDescr(");
                        Expression _left_9 = _comparisonImpl.getLeft();
                        CharSequence _compileTerminalLeft_3 = this.compileTerminalLeft(statementNum, ((ExpressionImpl) _left_9));
                        _builder.append(_compileTerminalLeft_3, "");
                        _builder.append(",");
                        Expression _right_6 = _comparisonImpl.getRight();
                        CharSequence _compileRecExpr_3 = this.compileRecExpr(eventName, statementNum, fluentName, ((ExpressionImpl) _right_6));
                        _builder.append(_compileRecExpr_3, "");
                        _builder.append(");");
                        _builder.newLineIfNotEmpty();
                      }
                    }
                    {
                      Expression _left_10 = _comparisonImpl.getLeft();
                      EClass _eClass_7 = _left_10.eClass();
                      String _name_7 = _eClass_7.getName();
                      boolean _contains_7 = _name_7.contains("Constant");
                      boolean _not_1 = (!_contains_7);
                      if (_not_1) {
                        _builder.append("condContainer = new LessEqualsDescr(");
                        Expression _left_11 = _comparisonImpl.getLeft();
                        CharSequence _compileRecExpr_4 = this.compileRecExpr(eventName, statementNum, fluentName, ((ExpressionImpl) _left_11));
                        _builder.append(_compileRecExpr_4, "");
                        _builder.append(",");
                        Expression _right_7 = _comparisonImpl.getRight();
                        CharSequence _compileRecExpr_5 = this.compileRecExpr(eventName, statementNum, fluentName, ((ExpressionImpl) _right_7));
                        _builder.append(_compileRecExpr_5, "");
                        _builder.append(");");
                        _builder.newLineIfNotEmpty();
                      }
                    }
                  }
                }
                _builder.newLine();
                CharSequence _compileContextEffect_1 = this.compileContextEffect(eventName, statementNum, fluentName, "LessEquals");
                _builder.append(_compileContextEffect_1, "");
                _builder.newLineIfNotEmpty();
              } else {
                String _op_2 = _comparisonImpl.getOp();
                boolean _equals_2 = _op_2.equals(">");
                if (_equals_2) {
                  {
                    boolean _and_2 = false;
                    Expression _left_12 = _comparisonImpl.getLeft();
                    EClass _eClass_8 = _left_12.eClass();
                    String _name_8 = _eClass_8.getName();
                    boolean _contains_8 = _name_8.contains("Constant");
                    if (!_contains_8) {
                      _and_2 = false;
                    } else {
                      Expression _right_8 = _comparisonImpl.getRight();
                      EClass _eClass_9 = _right_8.eClass();
                      String _name_9 = _eClass_9.getName();
                      boolean _contains_9 = _name_9.contains("Constant");
                      _and_2 = (_contains_8 && _contains_9);
                    }
                    if (_and_2) {
                      _builder.append("condContainer = new MoreDescr( ");
                      Expression _left_13 = _comparisonImpl.getLeft();
                      CharSequence _compileTerminalLeft_4 = this.compileTerminalLeft(statementNum, ((ExpressionImpl) _left_13));
                      _builder.append(_compileTerminalLeft_4, "");
                      _builder.append(",");
                      Expression _right_9 = _comparisonImpl.getRight();
                      CharSequence _compileTerminalRight_2 = this.compileTerminalRight(statementNum, ((ExpressionImpl) _right_9));
                      _builder.append(_compileTerminalRight_2, "");
                      _builder.append(");");
                      _builder.newLineIfNotEmpty();
                    } else {
                      {
                        Expression _left_14 = _comparisonImpl.getLeft();
                        EClass _eClass_10 = _left_14.eClass();
                        String _name_10 = _eClass_10.getName();
                        boolean _contains_10 = _name_10.contains("Constant");
                        if (_contains_10) {
                          _builder.append("condContainer = new MoreDescr(");
                          Expression _left_15 = _comparisonImpl.getLeft();
                          CharSequence _compileTerminalLeft_5 = this.compileTerminalLeft(statementNum, ((ExpressionImpl) _left_15));
                          _builder.append(_compileTerminalLeft_5, "");
                          _builder.append(",");
                          Expression _right_10 = _comparisonImpl.getRight();
                          CharSequence _compileRecExpr_6 = this.compileRecExpr(eventName, statementNum, fluentName, ((ExpressionImpl) _right_10));
                          _builder.append(_compileRecExpr_6, "");
                          _builder.append(");");
                          _builder.newLineIfNotEmpty();
                        }
                      }
                      {
                        Expression _left_16 = _comparisonImpl.getLeft();
                        EClass _eClass_11 = _left_16.eClass();
                        String _name_11 = _eClass_11.getName();
                        boolean _contains_11 = _name_11.contains("Constant");
                        boolean _not_2 = (!_contains_11);
                        if (_not_2) {
                          _builder.append("condContainer = new MoreDescr(");
                          Expression _left_17 = _comparisonImpl.getLeft();
                          CharSequence _compileRecExpr_7 = this.compileRecExpr(eventName, statementNum, fluentName, ((ExpressionImpl) _left_17));
                          _builder.append(_compileRecExpr_7, "");
                          _builder.append(",");
                          Expression _right_11 = _comparisonImpl.getRight();
                          CharSequence _compileRecExpr_8 = this.compileRecExpr(eventName, statementNum, fluentName, ((ExpressionImpl) _right_11));
                          _builder.append(_compileRecExpr_8, "");
                          _builder.append(");");
                          _builder.newLineIfNotEmpty();
                        }
                      }
                    }
                  }
                  _builder.newLine();
                  CharSequence _compileContextEffect_2 = this.compileContextEffect(eventName, statementNum, fluentName, "More");
                  _builder.append(_compileContextEffect_2, "");
                  _builder.newLineIfNotEmpty();
                } else {
                  {
                    boolean _and_3 = false;
                    Expression _left_18 = _comparisonImpl.getLeft();
                    EClass _eClass_12 = _left_18.eClass();
                    String _name_12 = _eClass_12.getName();
                    boolean _contains_12 = _name_12.contains("Constant");
                    if (!_contains_12) {
                      _and_3 = false;
                    } else {
                      Expression _right_12 = _comparisonImpl.getRight();
                      EClass _eClass_13 = _right_12.eClass();
                      String _name_13 = _eClass_13.getName();
                      boolean _contains_13 = _name_13.contains("Constant");
                      _and_3 = (_contains_12 && _contains_13);
                    }
                    if (_and_3) {
                      _builder.append("condContainer = new LessDescr( ");
                      Expression _left_19 = _comparisonImpl.getLeft();
                      CharSequence _compileTerminalLeft_6 = this.compileTerminalLeft(statementNum, ((ExpressionImpl) _left_19));
                      _builder.append(_compileTerminalLeft_6, "");
                      _builder.append(",");
                      Expression _right_13 = _comparisonImpl.getRight();
                      CharSequence _compileTerminalRight_3 = this.compileTerminalRight(statementNum, ((ExpressionImpl) _right_13));
                      _builder.append(_compileTerminalRight_3, "");
                      _builder.append(");");
                      _builder.newLineIfNotEmpty();
                    } else {
                      {
                        Expression _left_20 = _comparisonImpl.getLeft();
                        EClass _eClass_14 = _left_20.eClass();
                        String _name_14 = _eClass_14.getName();
                        boolean _contains_14 = _name_14.contains("Constant");
                        if (_contains_14) {
                          _builder.append("condContainer = new LessDescr(");
                          Expression _left_21 = _comparisonImpl.getLeft();
                          CharSequence _compileTerminalLeft_7 = this.compileTerminalLeft(statementNum, ((ExpressionImpl) _left_21));
                          _builder.append(_compileTerminalLeft_7, "");
                          _builder.append(",");
                          Expression _right_14 = _comparisonImpl.getRight();
                          CharSequence _compileRecExpr_9 = this.compileRecExpr(eventName, statementNum, fluentName, ((ExpressionImpl) _right_14));
                          _builder.append(_compileRecExpr_9, "");
                          _builder.append(");");
                          _builder.newLineIfNotEmpty();
                        }
                      }
                      {
                        Expression _left_22 = _comparisonImpl.getLeft();
                        EClass _eClass_15 = _left_22.eClass();
                        String _name_15 = _eClass_15.getName();
                        boolean _contains_15 = _name_15.contains("Constant");
                        boolean _not_3 = (!_contains_15);
                        if (_not_3) {
                          _builder.append("condContainer = new LessDescr(");
                          Expression _left_23 = _comparisonImpl.getLeft();
                          CharSequence _compileRecExpr_10 = this.compileRecExpr(eventName, statementNum, fluentName, ((ExpressionImpl) _left_23));
                          _builder.append(_compileRecExpr_10, "");
                          _builder.append(",");
                          Expression _right_15 = _comparisonImpl.getRight();
                          CharSequence _compileRecExpr_11 = this.compileRecExpr(eventName, statementNum, fluentName, ((ExpressionImpl) _right_15));
                          _builder.append(_compileRecExpr_11, "");
                          _builder.append(");");
                          _builder.newLineIfNotEmpty();
                        }
                      }
                    }
                  }
                  _builder.newLine();
                  CharSequence _compileContextEffect_3 = this.compileContextEffect(eventName, statementNum, fluentName, "Less");
                  _builder.append(_compileContextEffect_3, "");
                  _builder.newLineIfNotEmpty();
                }
              }
            }
          }
          _switchResult = _builder;
        }
      }
      if (!_matched) {
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("//default compileCond");
        _switchResult = _builder;
      }
      _xblockexpression = (_switchResult);
    }
    return _xblockexpression;
  }
  
  /**
   * HARD Condition Case
   */
  protected CharSequence _compileRecExpr(final String eventName, final int statementNum, final String fluentName, final NotImpl conditionExpr) {
    StringConcatenation _builder = new StringConcatenation();
    {
      Expression _expression = conditionExpr.getExpression();
      EClass _eClass = _expression.eClass();
      String _name = _eClass.getName();
      boolean _contains = _name.contains("Constant");
      if (_contains) {
        _builder.append("new NotDescr( ");
        Expression _expression_1 = conditionExpr.getExpression();
        CharSequence _compileTerminalLeft = this.compileTerminalLeft(statementNum, ((ExpressionImpl) _expression_1));
        _builder.append(_compileTerminalLeft, "");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
      } else {
        _builder.append("new NotDescr(");
        Expression _expression_2 = conditionExpr.getExpression();
        Object _compileRecExpr = this.compileRecExpr(eventName, statementNum, fluentName, ((ExpressionImpl) _expression_2));
        _builder.append(_compileRecExpr, "");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  protected CharSequence _compileRecExpr(final String eventName, final int statementNum, final String fluentName, final OrImpl conditionExpr) {
    StringConcatenation _builder = new StringConcatenation();
    {
      boolean _and = false;
      Expression _left = conditionExpr.getLeft();
      EClass _eClass = _left.eClass();
      String _name = _eClass.getName();
      boolean _contains = _name.contains("Constant");
      if (!_contains) {
        _and = false;
      } else {
        Expression _right = conditionExpr.getRight();
        EClass _eClass_1 = _right.eClass();
        String _name_1 = _eClass_1.getName();
        boolean _contains_1 = _name_1.contains("Constant");
        _and = (_contains && _contains_1);
      }
      if (_and) {
        _builder.append("new OrDescr( ");
        Expression _left_1 = conditionExpr.getLeft();
        CharSequence _compileTerminalLeft = this.compileTerminalLeft(statementNum, ((ExpressionImpl) _left_1));
        _builder.append(_compileTerminalLeft, "");
        _builder.append(",");
        Expression _right_1 = conditionExpr.getRight();
        CharSequence _compileTerminalLeft_1 = this.compileTerminalLeft(statementNum, ((ExpressionImpl) _right_1));
        _builder.append(_compileTerminalLeft_1, "");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
      } else {
        {
          Expression _left_2 = conditionExpr.getLeft();
          EClass _eClass_2 = _left_2.eClass();
          String _name_2 = _eClass_2.getName();
          boolean _contains_2 = _name_2.contains("Constant");
          if (_contains_2) {
            _builder.append("new OrDescr(");
            Expression _left_3 = conditionExpr.getLeft();
            CharSequence _compileTerminalLeft_2 = this.compileTerminalLeft(statementNum, ((ExpressionImpl) _left_3));
            _builder.append(_compileTerminalLeft_2, "");
            _builder.append(",");
            Expression _right_2 = conditionExpr.getRight();
            Object _compileRecExpr = this.compileRecExpr(eventName, statementNum, fluentName, ((ExpressionImpl) _right_2));
            _builder.append(_compileRecExpr, "");
            _builder.append(")");
            _builder.newLineIfNotEmpty();
          }
        }
        {
          Expression _left_4 = conditionExpr.getLeft();
          EClass _eClass_3 = _left_4.eClass();
          String _name_3 = _eClass_3.getName();
          boolean _contains_3 = _name_3.contains("Constant");
          boolean _not = (!_contains_3);
          if (_not) {
            _builder.append("new OrDescr(");
            Expression _left_5 = conditionExpr.getLeft();
            Object _compileRecExpr_1 = this.compileRecExpr(eventName, statementNum, fluentName, ((ExpressionImpl) _left_5));
            _builder.append(_compileRecExpr_1, "");
            _builder.append(",");
            Expression _right_3 = conditionExpr.getRight();
            Object _compileRecExpr_2 = this.compileRecExpr(eventName, statementNum, fluentName, ((ExpressionImpl) _right_3));
            _builder.append(_compileRecExpr_2, "");
            _builder.append(")");
          }
        }
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  protected CharSequence _compileRecExpr(final String eventName, final int statementNum, final String fluentName, final AndImpl conditionExpr) {
    StringConcatenation _builder = new StringConcatenation();
    {
      boolean _and = false;
      Expression _left = conditionExpr.getLeft();
      EClass _eClass = _left.eClass();
      String _name = _eClass.getName();
      boolean _contains = _name.contains("Constant");
      if (!_contains) {
        _and = false;
      } else {
        Expression _right = conditionExpr.getRight();
        EClass _eClass_1 = _right.eClass();
        String _name_1 = _eClass_1.getName();
        boolean _contains_1 = _name_1.contains("Constant");
        _and = (_contains && _contains_1);
      }
      if (_and) {
        _builder.append("new AndDescr( ");
        Expression _left_1 = conditionExpr.getLeft();
        CharSequence _compileTerminalLeft = this.compileTerminalLeft(statementNum, ((ExpressionImpl) _left_1));
        _builder.append(_compileTerminalLeft, "");
        _builder.append(",");
        Expression _right_1 = conditionExpr.getRight();
        CharSequence _compileTerminalLeft_1 = this.compileTerminalLeft(statementNum, ((ExpressionImpl) _right_1));
        _builder.append(_compileTerminalLeft_1, "");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
      } else {
        {
          Expression _left_2 = conditionExpr.getLeft();
          EClass _eClass_2 = _left_2.eClass();
          String _name_2 = _eClass_2.getName();
          boolean _contains_2 = _name_2.contains("Constant");
          if (_contains_2) {
            _builder.append("new AndDescr(");
            Expression _left_3 = conditionExpr.getLeft();
            CharSequence _compileTerminalLeft_2 = this.compileTerminalLeft(statementNum, ((ExpressionImpl) _left_3));
            _builder.append(_compileTerminalLeft_2, "");
            _builder.append(",");
            Expression _right_2 = conditionExpr.getRight();
            Object _compileRecExpr = this.compileRecExpr(eventName, statementNum, fluentName, ((ExpressionImpl) _right_2));
            _builder.append(_compileRecExpr, "");
            _builder.append(")");
            _builder.newLineIfNotEmpty();
          }
        }
        {
          Expression _left_4 = conditionExpr.getLeft();
          EClass _eClass_3 = _left_4.eClass();
          String _name_3 = _eClass_3.getName();
          boolean _contains_3 = _name_3.contains("Constant");
          boolean _not = (!_contains_3);
          if (_not) {
            _builder.append("new AndDescr(");
            Expression _left_5 = conditionExpr.getLeft();
            Object _compileRecExpr_1 = this.compileRecExpr(eventName, statementNum, fluentName, ((ExpressionImpl) _left_5));
            _builder.append(_compileRecExpr_1, "");
            _builder.append(",");
            Expression _right_3 = conditionExpr.getRight();
            Object _compileRecExpr_2 = this.compileRecExpr(eventName, statementNum, fluentName, ((ExpressionImpl) _right_3));
            _builder.append(_compileRecExpr_2, "");
            _builder.append(")");
          }
        }
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  protected CharSequence _compileRecExpr(final String eventName, final int statementNum, final String fluentName, final EqualityImpl conditionExpr) {
    StringConcatenation _builder = new StringConcatenation();
    {
      String _op = conditionExpr.getOp();
      boolean _equals = _op.equals("==");
      if (_equals) {
        {
          boolean _and = false;
          Expression _left = conditionExpr.getLeft();
          EClass _eClass = _left.eClass();
          String _name = _eClass.getName();
          boolean _contains = _name.contains("Constant");
          if (!_contains) {
            _and = false;
          } else {
            Expression _right = conditionExpr.getRight();
            EClass _eClass_1 = _right.eClass();
            String _name_1 = _eClass_1.getName();
            boolean _contains_1 = _name_1.contains("Constant");
            _and = (_contains && _contains_1);
          }
          if (_and) {
            _builder.append("new SameDescr( ");
            Expression _left_1 = conditionExpr.getLeft();
            CharSequence _compileTerminalLeft = this.compileTerminalLeft(statementNum, ((ExpressionImpl) _left_1));
            _builder.append(_compileTerminalLeft, "");
            _builder.append(",");
            Expression _right_1 = conditionExpr.getRight();
            CharSequence _compileTerminalLeft_1 = this.compileTerminalLeft(statementNum, ((ExpressionImpl) _right_1));
            _builder.append(_compileTerminalLeft_1, "");
            _builder.append(")");
            _builder.newLineIfNotEmpty();
          } else {
            {
              Expression _left_2 = conditionExpr.getLeft();
              EClass _eClass_2 = _left_2.eClass();
              String _name_2 = _eClass_2.getName();
              boolean _contains_2 = _name_2.contains("Constant");
              if (_contains_2) {
                _builder.append("new SameDescr(");
                Expression _left_3 = conditionExpr.getLeft();
                CharSequence _compileTerminalLeft_2 = this.compileTerminalLeft(statementNum, ((ExpressionImpl) _left_3));
                _builder.append(_compileTerminalLeft_2, "");
                _builder.append(",");
                Expression _right_2 = conditionExpr.getRight();
                Object _compileRecExpr = this.compileRecExpr(eventName, statementNum, fluentName, ((ExpressionImpl) _right_2));
                _builder.append(_compileRecExpr, "");
                _builder.append(")");
                _builder.newLineIfNotEmpty();
              }
            }
            {
              Expression _left_4 = conditionExpr.getLeft();
              EClass _eClass_3 = _left_4.eClass();
              String _name_3 = _eClass_3.getName();
              boolean _contains_3 = _name_3.contains("Constant");
              boolean _not = (!_contains_3);
              if (_not) {
                _builder.append("new SameDescr(");
                Expression _left_5 = conditionExpr.getLeft();
                Object _compileRecExpr_1 = this.compileRecExpr(eventName, statementNum, fluentName, ((ExpressionImpl) _left_5));
                _builder.append(_compileRecExpr_1, "");
                _builder.append(",");
                Expression _right_3 = conditionExpr.getRight();
                Object _compileRecExpr_2 = this.compileRecExpr(eventName, statementNum, fluentName, ((ExpressionImpl) _right_3));
                _builder.append(_compileRecExpr_2, "");
                _builder.append(")");
              }
            }
            _builder.newLineIfNotEmpty();
          }
        }
      } else {
        String _op_1 = conditionExpr.getOp();
        boolean _equals_1 = _op_1.equals("!=");
        if (_equals_1) {
          {
            boolean _and_1 = false;
            Expression _left_6 = conditionExpr.getLeft();
            EClass _eClass_4 = _left_6.eClass();
            String _name_4 = _eClass_4.getName();
            boolean _contains_4 = _name_4.contains("Constant");
            if (!_contains_4) {
              _and_1 = false;
            } else {
              Expression _right_4 = conditionExpr.getRight();
              EClass _eClass_5 = _right_4.eClass();
              String _name_5 = _eClass_5.getName();
              boolean _contains_5 = _name_5.contains("Constant");
              _and_1 = (_contains_4 && _contains_5);
            }
            if (_and_1) {
              _builder.append("new DifferentDescr( ");
              Expression _left_7 = conditionExpr.getLeft();
              CharSequence _compileTerminalLeft_3 = this.compileTerminalLeft(statementNum, ((ExpressionImpl) _left_7));
              _builder.append(_compileTerminalLeft_3, "");
              _builder.append(",");
              Expression _right_5 = conditionExpr.getRight();
              CharSequence _compileTerminalLeft_4 = this.compileTerminalLeft(statementNum, ((ExpressionImpl) _right_5));
              _builder.append(_compileTerminalLeft_4, "");
              _builder.append(")");
              _builder.newLineIfNotEmpty();
            } else {
              {
                Expression _left_8 = conditionExpr.getLeft();
                EClass _eClass_6 = _left_8.eClass();
                String _name_6 = _eClass_6.getName();
                boolean _contains_6 = _name_6.contains("Constant");
                if (_contains_6) {
                  _builder.append("new DifferentDescr(");
                  Expression _left_9 = conditionExpr.getLeft();
                  CharSequence _compileTerminalLeft_5 = this.compileTerminalLeft(statementNum, ((ExpressionImpl) _left_9));
                  _builder.append(_compileTerminalLeft_5, "");
                  _builder.append(",");
                  Expression _right_6 = conditionExpr.getRight();
                  Object _compileRecExpr_3 = this.compileRecExpr(eventName, statementNum, fluentName, ((ExpressionImpl) _right_6));
                  _builder.append(_compileRecExpr_3, "");
                  _builder.append(")");
                  _builder.newLineIfNotEmpty();
                }
              }
              {
                Expression _left_10 = conditionExpr.getLeft();
                EClass _eClass_7 = _left_10.eClass();
                String _name_7 = _eClass_7.getName();
                boolean _contains_7 = _name_7.contains("Constant");
                boolean _not_1 = (!_contains_7);
                if (_not_1) {
                  _builder.append("new DifferentDescr(");
                  Expression _left_11 = conditionExpr.getLeft();
                  Object _compileRecExpr_4 = this.compileRecExpr(eventName, statementNum, fluentName, ((ExpressionImpl) _left_11));
                  _builder.append(_compileRecExpr_4, "");
                  _builder.append(",");
                  Expression _right_7 = conditionExpr.getRight();
                  Object _compileRecExpr_5 = this.compileRecExpr(eventName, statementNum, fluentName, ((ExpressionImpl) _right_7));
                  _builder.append(_compileRecExpr_5, "");
                  _builder.append(")");
                }
              }
              _builder.newLineIfNotEmpty();
            }
          }
        }
      }
    }
    return _builder;
  }
  
  protected CharSequence _compileRecExpr(final String eventName, final int statementNum, final String fluentName, final ComparisonImpl conditionExpr) {
    StringConcatenation _builder = new StringConcatenation();
    {
      String _op = conditionExpr.getOp();
      boolean _equals = _op.equals(">=");
      if (_equals) {
        {
          boolean _and = false;
          Expression _left = conditionExpr.getLeft();
          EClass _eClass = _left.eClass();
          String _name = _eClass.getName();
          boolean _contains = _name.contains("Constant");
          if (!_contains) {
            _and = false;
          } else {
            Expression _right = conditionExpr.getRight();
            EClass _eClass_1 = _right.eClass();
            String _name_1 = _eClass_1.getName();
            boolean _contains_1 = _name_1.contains("Constant");
            _and = (_contains && _contains_1);
          }
          if (_and) {
            _builder.append("new MoreEqualsDescr( ");
            Expression _left_1 = conditionExpr.getLeft();
            CharSequence _compileTerminalLeft = this.compileTerminalLeft(statementNum, ((ExpressionImpl) _left_1));
            _builder.append(_compileTerminalLeft, "");
            _builder.append(",");
            Expression _right_1 = conditionExpr.getRight();
            CharSequence _compileTerminalLeft_1 = this.compileTerminalLeft(statementNum, ((ExpressionImpl) _right_1));
            _builder.append(_compileTerminalLeft_1, "");
            _builder.append(")");
            _builder.newLineIfNotEmpty();
          } else {
            {
              Expression _left_2 = conditionExpr.getLeft();
              EClass _eClass_2 = _left_2.eClass();
              String _name_2 = _eClass_2.getName();
              boolean _contains_2 = _name_2.contains("Constant");
              if (_contains_2) {
                _builder.append("new MoreEqualsDescr(");
                Expression _left_3 = conditionExpr.getLeft();
                CharSequence _compileTerminalLeft_2 = this.compileTerminalLeft(statementNum, ((ExpressionImpl) _left_3));
                _builder.append(_compileTerminalLeft_2, "");
                _builder.append(",");
                _builder.newLineIfNotEmpty();
                Expression _right_2 = conditionExpr.getRight();
                Object _compileRecExpr = this.compileRecExpr(eventName, statementNum, fluentName, ((ExpressionImpl) _right_2));
                _builder.append(_compileRecExpr, "");
                _builder.append(")");
                _builder.newLineIfNotEmpty();
              }
            }
            {
              Expression _left_4 = conditionExpr.getLeft();
              EClass _eClass_3 = _left_4.eClass();
              String _name_3 = _eClass_3.getName();
              boolean _contains_3 = _name_3.contains("Constant");
              boolean _not = (!_contains_3);
              if (_not) {
                _builder.append("new MoreEqualsDescr(");
                Expression _left_5 = conditionExpr.getLeft();
                Object _compileRecExpr_1 = this.compileRecExpr(eventName, statementNum, fluentName, ((ExpressionImpl) _left_5));
                _builder.append(_compileRecExpr_1, "");
                _builder.append(",");
                _builder.newLineIfNotEmpty();
                Expression _right_3 = conditionExpr.getRight();
                Object _compileRecExpr_2 = this.compileRecExpr(eventName, statementNum, fluentName, ((ExpressionImpl) _right_3));
                _builder.append(_compileRecExpr_2, "");
                _builder.append(")");
              }
            }
            _builder.newLineIfNotEmpty();
          }
        }
      } else {
        String _op_1 = conditionExpr.getOp();
        boolean _equals_1 = _op_1.equals("<=");
        if (_equals_1) {
          {
            boolean _and_1 = false;
            Expression _left_6 = conditionExpr.getLeft();
            EClass _eClass_4 = _left_6.eClass();
            String _name_4 = _eClass_4.getName();
            boolean _contains_4 = _name_4.contains("Constant");
            if (!_contains_4) {
              _and_1 = false;
            } else {
              Expression _right_4 = conditionExpr.getRight();
              EClass _eClass_5 = _right_4.eClass();
              String _name_5 = _eClass_5.getName();
              boolean _contains_5 = _name_5.contains("Constant");
              _and_1 = (_contains_4 && _contains_5);
            }
            if (_and_1) {
              _builder.append("new LessEqualsDescr( ");
              Expression _left_7 = conditionExpr.getLeft();
              CharSequence _compileTerminalLeft_3 = this.compileTerminalLeft(statementNum, ((ExpressionImpl) _left_7));
              _builder.append(_compileTerminalLeft_3, "");
              _builder.append(",");
              Expression _right_5 = conditionExpr.getRight();
              CharSequence _compileTerminalLeft_4 = this.compileTerminalLeft(statementNum, ((ExpressionImpl) _right_5));
              _builder.append(_compileTerminalLeft_4, "");
              _builder.append(")");
              _builder.newLineIfNotEmpty();
            } else {
              {
                Expression _left_8 = conditionExpr.getLeft();
                EClass _eClass_6 = _left_8.eClass();
                String _name_6 = _eClass_6.getName();
                boolean _contains_6 = _name_6.contains("Constant");
                if (_contains_6) {
                  _builder.append("new LessEqualsDescr(");
                  Expression _left_9 = conditionExpr.getLeft();
                  CharSequence _compileTerminalLeft_5 = this.compileTerminalLeft(statementNum, ((ExpressionImpl) _left_9));
                  _builder.append(_compileTerminalLeft_5, "");
                  _builder.append(",");
                  _builder.newLineIfNotEmpty();
                  Expression _right_6 = conditionExpr.getRight();
                  Object _compileRecExpr_3 = this.compileRecExpr(eventName, statementNum, fluentName, ((ExpressionImpl) _right_6));
                  _builder.append(_compileRecExpr_3, "");
                  _builder.append(")");
                  _builder.newLineIfNotEmpty();
                }
              }
              {
                Expression _left_10 = conditionExpr.getLeft();
                EClass _eClass_7 = _left_10.eClass();
                String _name_7 = _eClass_7.getName();
                boolean _contains_7 = _name_7.contains("Constant");
                boolean _not_1 = (!_contains_7);
                if (_not_1) {
                  _builder.append("new LessEqualsDescr(");
                  Expression _left_11 = conditionExpr.getLeft();
                  Object _compileRecExpr_4 = this.compileRecExpr(eventName, statementNum, fluentName, ((ExpressionImpl) _left_11));
                  _builder.append(_compileRecExpr_4, "");
                  _builder.append(",");
                  _builder.newLineIfNotEmpty();
                  Expression _right_7 = conditionExpr.getRight();
                  Object _compileRecExpr_5 = this.compileRecExpr(eventName, statementNum, fluentName, ((ExpressionImpl) _right_7));
                  _builder.append(_compileRecExpr_5, "");
                  _builder.append(")");
                }
              }
              _builder.newLineIfNotEmpty();
            }
          }
        } else {
          String _op_2 = conditionExpr.getOp();
          boolean _equals_2 = _op_2.equals(">");
          if (_equals_2) {
            {
              boolean _and_2 = false;
              Expression _left_12 = conditionExpr.getLeft();
              EClass _eClass_8 = _left_12.eClass();
              String _name_8 = _eClass_8.getName();
              boolean _contains_8 = _name_8.contains("Constant");
              if (!_contains_8) {
                _and_2 = false;
              } else {
                Expression _right_8 = conditionExpr.getRight();
                EClass _eClass_9 = _right_8.eClass();
                String _name_9 = _eClass_9.getName();
                boolean _contains_9 = _name_9.contains("Constant");
                _and_2 = (_contains_8 && _contains_9);
              }
              if (_and_2) {
                _builder.append("new MoreDescr( ");
                Expression _left_13 = conditionExpr.getLeft();
                CharSequence _compileTerminalLeft_6 = this.compileTerminalLeft(statementNum, ((ExpressionImpl) _left_13));
                _builder.append(_compileTerminalLeft_6, "");
                _builder.append(",");
                Expression _right_9 = conditionExpr.getRight();
                CharSequence _compileTerminalLeft_7 = this.compileTerminalLeft(statementNum, ((ExpressionImpl) _right_9));
                _builder.append(_compileTerminalLeft_7, "");
                _builder.append(")");
                _builder.newLineIfNotEmpty();
              } else {
                {
                  Expression _left_14 = conditionExpr.getLeft();
                  EClass _eClass_10 = _left_14.eClass();
                  String _name_10 = _eClass_10.getName();
                  boolean _contains_10 = _name_10.contains("Constant");
                  if (_contains_10) {
                    _builder.append("new MoreDescr(");
                    Expression _left_15 = conditionExpr.getLeft();
                    CharSequence _compileTerminalLeft_8 = this.compileTerminalLeft(statementNum, ((ExpressionImpl) _left_15));
                    _builder.append(_compileTerminalLeft_8, "");
                    _builder.append(",");
                    _builder.newLineIfNotEmpty();
                    Expression _right_10 = conditionExpr.getRight();
                    Object _compileRecExpr_6 = this.compileRecExpr(eventName, statementNum, fluentName, ((ExpressionImpl) _right_10));
                    _builder.append(_compileRecExpr_6, "");
                    _builder.append(")");
                    _builder.newLineIfNotEmpty();
                  }
                }
                {
                  Expression _left_16 = conditionExpr.getLeft();
                  EClass _eClass_11 = _left_16.eClass();
                  String _name_11 = _eClass_11.getName();
                  boolean _contains_11 = _name_11.contains("Constant");
                  boolean _not_2 = (!_contains_11);
                  if (_not_2) {
                    _builder.append("new MoreDescr(");
                    Expression _left_17 = conditionExpr.getLeft();
                    Object _compileRecExpr_7 = this.compileRecExpr(eventName, statementNum, fluentName, ((ExpressionImpl) _left_17));
                    _builder.append(_compileRecExpr_7, "");
                    _builder.append(",");
                    _builder.newLineIfNotEmpty();
                    Expression _right_11 = conditionExpr.getRight();
                    Object _compileRecExpr_8 = this.compileRecExpr(eventName, statementNum, fluentName, ((ExpressionImpl) _right_11));
                    _builder.append(_compileRecExpr_8, "");
                    _builder.append(")");
                  }
                }
                _builder.newLineIfNotEmpty();
              }
            }
          } else {
            {
              boolean _and_3 = false;
              Expression _left_18 = conditionExpr.getLeft();
              EClass _eClass_12 = _left_18.eClass();
              String _name_12 = _eClass_12.getName();
              boolean _contains_12 = _name_12.contains("Constant");
              if (!_contains_12) {
                _and_3 = false;
              } else {
                Expression _right_12 = conditionExpr.getRight();
                EClass _eClass_13 = _right_12.eClass();
                String _name_13 = _eClass_13.getName();
                boolean _contains_13 = _name_13.contains("Constant");
                _and_3 = (_contains_12 && _contains_13);
              }
              if (_and_3) {
                _builder.append("new LessDescr( ");
                Expression _left_19 = conditionExpr.getLeft();
                CharSequence _compileTerminalLeft_9 = this.compileTerminalLeft(statementNum, ((ExpressionImpl) _left_19));
                _builder.append(_compileTerminalLeft_9, "");
                _builder.append(",");
                Expression _right_13 = conditionExpr.getRight();
                CharSequence _compileTerminalLeft_10 = this.compileTerminalLeft(statementNum, ((ExpressionImpl) _right_13));
                _builder.append(_compileTerminalLeft_10, "");
                _builder.append(")");
                _builder.newLineIfNotEmpty();
              } else {
                {
                  Expression _left_20 = conditionExpr.getLeft();
                  EClass _eClass_14 = _left_20.eClass();
                  String _name_14 = _eClass_14.getName();
                  boolean _contains_14 = _name_14.contains("Constant");
                  if (_contains_14) {
                    _builder.append("new LessDescr(");
                    Expression _left_21 = conditionExpr.getLeft();
                    CharSequence _compileTerminalLeft_11 = this.compileTerminalLeft(statementNum, ((ExpressionImpl) _left_21));
                    _builder.append(_compileTerminalLeft_11, "");
                    _builder.append(",");
                    _builder.newLineIfNotEmpty();
                    Expression _right_14 = conditionExpr.getRight();
                    Object _compileRecExpr_9 = this.compileRecExpr(eventName, statementNum, fluentName, ((ExpressionImpl) _right_14));
                    _builder.append(_compileRecExpr_9, "");
                    _builder.append(")");
                    _builder.newLineIfNotEmpty();
                  }
                }
                {
                  Expression _left_22 = conditionExpr.getLeft();
                  EClass _eClass_15 = _left_22.eClass();
                  String _name_15 = _eClass_15.getName();
                  boolean _contains_15 = _name_15.contains("Constant");
                  boolean _not_3 = (!_contains_15);
                  if (_not_3) {
                    _builder.append("new LessDescr(");
                    Expression _left_23 = conditionExpr.getLeft();
                    Object _compileRecExpr_10 = this.compileRecExpr(eventName, statementNum, fluentName, ((ExpressionImpl) _left_23));
                    _builder.append(_compileRecExpr_10, "");
                    _builder.append(",");
                    _builder.newLineIfNotEmpty();
                    Expression _right_15 = conditionExpr.getRight();
                    Object _compileRecExpr_11 = this.compileRecExpr(eventName, statementNum, fluentName, ((ExpressionImpl) _right_15));
                    _builder.append(_compileRecExpr_11, "");
                    _builder.append(")");
                  }
                }
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
      }
    }
    return _builder;
  }
  
  /**
   * Compile Gradle
   */
  public CharSequence compileGradle() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("buildscript {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("repositories {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("mavenCentral()");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("dependencies {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("classpath \'com.android.tools.build:gradle:0.5.+\'");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("apply plugin: \'android\'");
    _builder.newLine();
    _builder.append("repositories {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("mavenCentral()");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("mavenLocal()");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append(" ");
    _builder.newLine();
    _builder.append("dependencies {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("compile(\'it.bragaglia.freckles:Model_Lib:1.0\')");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("compile(\'com.example.android:Android_Support_Lib:4.0\')");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("//dependencies {");
    _builder.newLine();
    _builder.append("//    compile fileTree(dir: \'libs\', include: \'*.jar\')");
    _builder.newLine();
    _builder.append("//}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("android {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("compileSdkVersion 19");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("buildToolsVersion \"19.0.0\"");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("sourceSets {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("main {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("manifest.srcFile \'AndroidManifest.xml\'");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("java.srcDirs = [\'src\']");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("resources.srcDirs = [\'src\']");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("aidl.srcDirs = [\'src\']");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("renderscript.srcDirs = [\'src\']");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("res.srcDirs = [\'res\']");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("assets.srcDirs = [\'assets\']");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("instrumentTest.setRoot(\'tests\')");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("debug.setRoot(\'build-types/debug\')");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("release.setRoot(\'build-types/release\')");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  /**
   * Compile MANIFEST
   */
  public CharSequence compileManifest() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<?xml version=\"1.0\" encoding=\"utf-8\"?>");
    _builder.newLine();
    _builder.append("<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("package=\"com.gradle.application.medicalec\"");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("android:versionCode=\"1\"");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("android:versionName=\"1.0\" >");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<uses-sdk");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("android:minSdkVersion=\"14\"");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("android:targetSdkVersion=\"19\" />");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<application");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("android:allowBackup=\"true\"");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("android:icon=\"@drawable/ic_launcher\"");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("android:label=\"");
    _builder.append(this.APPLICATION_NAME, "        ");
    _builder.append("\"");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("android:theme=\"@style/AppTheme\" ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("android:debuggable=\"true\">");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<activity");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("android:name=\"com.gradle.application.medicalec.MainActivity\"");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("android:label=\"");
    _builder.append(this.APPLICATION_NAME, "            ");
    _builder.append("\" >");
    _builder.newLineIfNotEmpty();
    _builder.append("            ");
    _builder.append("<intent-filter>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<action android:name=\"android.intent.action.MAIN\" />");
    _builder.newLine();
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<category android:name=\"android.intent.category.LAUNCHER\" />");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("</intent-filter>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("</activity>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("</application>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("</manifest>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    return _builder;
  }
  
  /**
   * Compile RES
   */
  public CharSequence compileValueStyle() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<resources>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<!--");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("Base application theme, dependent on API level. This theme is replaced");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("by AppBaseTheme from res/values-vXX/styles.xml on newer devices.");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("-->");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<style name=\"AppBaseTheme\" parent=\"android:Theme.Light\">");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<!--");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("Theme customizations available in newer API levels can go in");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("res/values-vXX/styles.xml, while customizations related to");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("backward-compatibility can go here.");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("-->");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("</style>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<!-- Application theme. -->");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<style name=\"AppTheme\" parent=\"AppBaseTheme\">");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<!-- All customizations that are NOT specific to a particular API-level can go here. -->");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("</style>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("</resources>");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileValueString() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<?xml version=\"1.0\" encoding=\"utf-8\"?>");
    _builder.newLine();
    _builder.append("<resources>\t\t");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<string name=\"app_name\">MedicalEC</string>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<string name=\"action_settings\">Settings</string>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<string name=\"title_section1\">Section 1</string>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<string name=\"title_section2\">Section 2</string>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<string name=\"title_section3\">Section 3</string>\t\t");
    _builder.newLine();
    _builder.append("</resources>");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileValueDimens() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<resources>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<!-- Default screen margins, per the Android Design guidelines. -->");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<dimen name=\"activity_horizontal_margin\">16dp</dimen>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<dimen name=\"activity_vertical_margin\">16dp</dimen>\t\t");
    _builder.newLine();
    _builder.append("</resources>");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileLayoutActivityMain() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<FrameLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("xmlns:tools=\"http://schemas.android.com/tools\"");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("android:id=\"@+id/container\"");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("android:layout_width=\"match_parent\"");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("android:layout_height=\"match_parent\"");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("tools:context=\".MainActivity\"");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("tools:ignore=\"MergeRootFrame\" />");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileLayoutFragmentMainDummy() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("xmlns:tools=\"http://schemas.android.com/tools\"");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("android:layout_width=\"match_parent\"");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("android:layout_height=\"match_parent\"");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("android:paddingBottom=\"@dimen/activity_vertical_margin\"");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("android:paddingLeft=\"@dimen/activity_horizontal_margin\"");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("android:paddingRight=\"@dimen/activity_horizontal_margin\"");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("android:paddingTop=\"@dimen/activity_vertical_margin\"");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("tools:context=\".MainActivity$DummySectionFragment\" >");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<TextView");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("android:id=\"@+id/section_label\"");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("android:layout_width=\"wrap_content\"");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("android:layout_height=\"wrap_content\" />");
    _builder.newLine();
    _builder.newLine();
    _builder.append("</RelativeLayout>");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileMenuMain() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<menu xmlns:android=\"http://schemas.android.com/apk/res/android\" >");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<item");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("android:id=\"@+id/action_settings\"");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("android:orderInCategory=\"100\"");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("android:showAsAction=\"never\"");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("android:title=\"@string/action_settings\"/>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("</menu>");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  /**
   * Compile JAVA
   */
  public CharSequence compileMainJava() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package com.gradle.application.medicalec;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import android.app.ActionBar;");
    _builder.newLine();
    _builder.append("import android.os.Bundle;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import android.support.v4.app.Fragment;");
    _builder.newLine();
    _builder.append("import android.support.v4.app.FragmentActivity;");
    _builder.newLine();
    _builder.append("import android.support.v4.app.NavUtils;");
    _builder.newLine();
    _builder.append("import android.view.Gravity;");
    _builder.newLine();
    _builder.append("import android.view.LayoutInflater;");
    _builder.newLine();
    _builder.append("import android.view.Menu;");
    _builder.newLine();
    _builder.append("import android.view.MenuItem;");
    _builder.newLine();
    _builder.append("import android.view.View;");
    _builder.newLine();
    _builder.append("import android.view.ViewGroup;");
    _builder.newLine();
    _builder.append("import android.widget.ArrayAdapter;");
    _builder.newLine();
    _builder.append("import android.widget.TextView;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class MainActivity extends FragmentActivity implements");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("ActionBar.OnNavigationListener {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* The serialization (saved instance state) Bundle key representing the");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* current dropdown position.");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static final String STATE_SELECTED_NAVIGATION_ITEM = \"selected_navigation_item\";");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected void onCreate(Bundle savedInstanceState) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("super.onCreate(savedInstanceState);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("setContentView(R.layout.activity_main);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("//Proj Var");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("final Model myModel = null;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// Set up the action bar to show a dropdown list.");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("final ActionBar actionBar = getActionBar();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("actionBar.setDisplayShowTitleEnabled(false);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("actionBar.setNavigationMode(ActionBar.NAVIGATION_MODE_LIST);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// Set up the dropdown list navigation in the action bar.");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("actionBar.setListNavigationCallbacks(");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// Specify a SpinnerAdapter to populate the dropdown list.");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("new ArrayAdapter<String>(actionBar.getThemedContext(),");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("android.R.layout.simple_list_item_1,");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("android.R.id.text1, new String[] {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("getString(R.string.title_section1),");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("getString(R.string.title_section2),");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("getString(R.string.title_section3), }), this);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void onRestoreInstanceState(Bundle savedInstanceState) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// Restore the previously serialized current dropdown position.");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (savedInstanceState.containsKey(STATE_SELECTED_NAVIGATION_ITEM)) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("getActionBar().setSelectedNavigationItem(");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("savedInstanceState.getInt(STATE_SELECTED_NAVIGATION_ITEM));");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void onSaveInstanceState(Bundle outState) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// Serialize the current dropdown position.");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("outState.putInt(STATE_SELECTED_NAVIGATION_ITEM, getActionBar()");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append(".getSelectedNavigationIndex());");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public boolean onCreateOptionsMenu(Menu menu) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// Inflate the menu; this adds items to the action bar if it is present.");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("getMenuInflater().inflate(R.menu.main, menu);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return true;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public boolean onNavigationItemSelected(int position, long id) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// When the given dropdown item is selected, show its contents in the");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// container view.");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Fragment fragment = new DummySectionFragment();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Bundle args = new Bundle();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("args.putInt(DummySectionFragment.ARG_SECTION_NUMBER, position + 1);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("fragment.setArguments(args);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("getSupportFragmentManager().beginTransaction()");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append(".replace(R.id.container, fragment).commit();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return true;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* A dummy fragment representing a section of the app, but that simply");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* displays dummy text.");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static class DummySectionFragment extends Fragment {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* The fragment argument representing the section number for this");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* fragment.");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public static final String ARG_SECTION_NUMBER = \"section_number\";");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public DummySectionFragment() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public View onCreateView(LayoutInflater inflater, ViewGroup container,");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("Bundle savedInstanceState) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("View rootView = inflater.inflate(R.layout.fragment_main_dummy,");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("container, false);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("TextView dummyTextView = (TextView) rootView");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append(".findViewById(R.id.section_label);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("dummyTextView.setText(Integer.toString(getArguments().getInt(");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("ARG_SECTION_NUMBER)));");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return rootView;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileTerminalRight(final int statementNum, final Container term) {
    if (term instanceof ExpressionImpl) {
      return _compileTerminalRight(statementNum, (ExpressionImpl)term);
    } else if (term instanceof ReferenceTypeImpl) {
      return _compileTerminalRight(statementNum, (ReferenceTypeImpl)term);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(statementNum, term).toString());
    }
  }
  
  public CharSequence compileTerminalLeft(final int statementNum, final Container term) {
    if (term instanceof ExpressionImpl) {
      return _compileTerminalLeft(statementNum, (ExpressionImpl)term);
    } else if (term instanceof ReferenceTypeImpl) {
      return _compileTerminalLeft(statementNum, (ReferenceTypeImpl)term);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(statementNum, term).toString());
    }
  }
  
  public CharSequence compileRecExpr(final String eventName, final int statementNum, final String fluentName, final ExpressionImpl conditionExpr) {
    if (conditionExpr instanceof AndImpl) {
      return _compileRecExpr(eventName, statementNum, fluentName, (AndImpl)conditionExpr);
    } else if (conditionExpr instanceof BoolConstantImpl) {
      return _compileRecExpr(eventName, statementNum, fluentName, (BoolConstantImpl)conditionExpr);
    } else if (conditionExpr instanceof ComparisonImpl) {
      return _compileRecExpr(eventName, statementNum, fluentName, (ComparisonImpl)conditionExpr);
    } else if (conditionExpr instanceof EqualityImpl) {
      return _compileRecExpr(eventName, statementNum, fluentName, (EqualityImpl)conditionExpr);
    } else if (conditionExpr instanceof FloatConstantImpl) {
      return _compileRecExpr(eventName, statementNum, fluentName, (FloatConstantImpl)conditionExpr);
    } else if (conditionExpr instanceof IntConstantImpl) {
      return _compileRecExpr(eventName, statementNum, fluentName, (IntConstantImpl)conditionExpr);
    } else if (conditionExpr instanceof MinusImpl) {
      return _compileRecExpr(eventName, statementNum, fluentName, (MinusImpl)conditionExpr);
    } else if (conditionExpr instanceof MulOrDivImpl) {
      return _compileRecExpr(eventName, statementNum, fluentName, (MulOrDivImpl)conditionExpr);
    } else if (conditionExpr instanceof NotImpl) {
      return _compileRecExpr(eventName, statementNum, fluentName, (NotImpl)conditionExpr);
    } else if (conditionExpr instanceof OrImpl) {
      return _compileRecExpr(eventName, statementNum, fluentName, (OrImpl)conditionExpr);
    } else if (conditionExpr instanceof PlusImpl) {
      return _compileRecExpr(eventName, statementNum, fluentName, (PlusImpl)conditionExpr);
    } else if (conditionExpr instanceof ReferenceImpl) {
      return _compileRecExpr(eventName, statementNum, fluentName, (ReferenceImpl)conditionExpr);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(eventName, statementNum, fluentName, conditionExpr).toString());
    }
  }
}
