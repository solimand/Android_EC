/**
 * generated by Xtext
 */
package org.project.droolsDSL.scoping;

import com.google.common.collect.Iterables;
import java.util.Arrays;
import java.util.List;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider;
import org.project.droolsDSL.ddsl.DroolsModel;
import org.project.droolsDSL.ddsl.Event;
import org.project.droolsDSL.ddsl.EventFeature;
import org.project.droolsDSL.ddsl.Fluent;
import org.project.droolsDSL.ddsl.Statement;

/**
 * This class contains custom scoping description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation.html#scoping
 * on how and when to use it
 * 
 * IScope scope_<EClass name>_<EFeature name>(<Context type> context,EReference reference)
 * 
 * IScope scope_<Object type>(<Context type> context,EReference reference)
 * 
 * PS = the scope for our DSL is:
 * 		PARAM visibility = Statement Only;
 * 		FLUENT visibility = All Model.
 */
@SuppressWarnings("all")
public class DdslScopeProvider extends AbstractDeclarativeScopeProvider {
  private Iterable<Fluent> allFluentDeclaration(final List<Statement> list) {
    Iterable<Fluent> _filter = Iterables.<Fluent>filter(list, Fluent.class);
    return _filter;
  }
  
  protected IScope _function1(final Statement context, final EObject o) {
    Event _event = context.getEvent();
    EList<EventFeature> _param = _event.getParam();
    IScope _scopeFor = Scopes.scopeFor(_param);
    return _scopeFor;
  }
  
  protected IScope _function1(final DroolsModel context, final EObject o) {
    EList<Statement> _statements = context.getStatements();
    Iterable<Fluent> _allFluentDeclaration = this.allFluentDeclaration(_statements);
    IScope _scopeFor = Scopes.scopeFor(_allFluentDeclaration);
    return _scopeFor;
  }
  
  public IScope function1(final EObject context, final EObject o) {
    if (context instanceof DroolsModel) {
      return _function1((DroolsModel)context, o);
    } else if (context instanceof Statement) {
      return _function1((Statement)context, o);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(context, o).toString());
    }
  }
}
