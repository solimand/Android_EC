/**
 * generated by Xtext
 */
package org.project.droolsDSL.scoping;

import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider;
import org.project.droolsDSL.ddsl.Event;
import org.project.droolsDSL.ddsl.EventFeature;
import org.project.droolsDSL.ddsl.Fluent;
import org.project.droolsDSL.ddsl.Statement;

/**
 * This class contains custom scoping description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation.html#scoping
 * on how and when to use it
 */
@SuppressWarnings("all")
public class DdslScopeProvider extends AbstractDeclarativeScopeProvider {
  public IScope scope_Reference_ref(final Statement statement, final EReference ref) {
    IScope _xifexpression = null;
    String _name = ref.getName();
    char _charAt = _name.charAt(0);
    boolean _isLowerCase = Character.isLowerCase(_charAt);
    if (_isLowerCase) {
      Event _event = statement.getEvent();
      EList<EventFeature> _param = _event.getParam();
      IScope _scopeFor = Scopes.scopeFor(_param);
      _xifexpression = _scopeFor;
    } else {
      IScope _xifexpression_1 = null;
      String _name_1 = ref.getName();
      char _charAt_1 = _name_1.charAt(0);
      boolean _isLowerCase_1 = Character.isLowerCase(_charAt_1);
      if (_isLowerCase_1) {
        EList<Fluent> _fluent = statement.getFluent();
        IScope _scopeFor_1 = Scopes.scopeFor(_fluent);
        _xifexpression_1 = _scopeFor_1;
      } else {
        _xifexpression_1 = IScope.NULLSCOPE;
      }
      _xifexpression = _xifexpression_1;
    }
    return _xifexpression;
  }
}
