/*
* generated by Xtext
*/
package org.project.droolsDSL.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class DdslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class DroolsModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DroolsModel");
		private final Assignment cStatementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cStatementsStatementParserRuleCall_0 = (RuleCall)cStatementsAssignment.eContents().get(0);
		
		//DroolsModel:
		//	statements+=Statement*;
		public ParserRule getRule() { return rule; }

		//statements+=Statement*
		public Assignment getStatementsAssignment() { return cStatementsAssignment; }

		//Statement
		public RuleCall getStatementsStatementParserRuleCall_0() { return cStatementsStatementParserRuleCall_0; }
	}

	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEventAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEventEventParserRuleCall_1_0 = (RuleCall)cEventAssignment_1.eContents().get(0);
		private final Keyword cSetKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFluentAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFluentFluentParserRuleCall_3_0 = (RuleCall)cFluentAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cFluentAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cFluentFluentParserRuleCall_4_1_0 = (RuleCall)cFluentAssignment_4_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Statement:
		//	"on" event=Event "set" fluent+=Fluent ("," fluent+=Fluent)* ";";
		public ParserRule getRule() { return rule; }

		//"on" event=Event "set" fluent+=Fluent ("," fluent+=Fluent)* ";"
		public Group getGroup() { return cGroup; }

		//"on"
		public Keyword getOnKeyword_0() { return cOnKeyword_0; }

		//event=Event
		public Assignment getEventAssignment_1() { return cEventAssignment_1; }

		//Event
		public RuleCall getEventEventParserRuleCall_1_0() { return cEventEventParserRuleCall_1_0; }

		//"set"
		public Keyword getSetKeyword_2() { return cSetKeyword_2; }

		//fluent+=Fluent
		public Assignment getFluentAssignment_3() { return cFluentAssignment_3; }

		//Fluent
		public RuleCall getFluentFluentParserRuleCall_3_0() { return cFluentFluentParserRuleCall_3_0; }

		//("," fluent+=Fluent)*
		public Group getGroup_4() { return cGroup_4; }

		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//fluent+=Fluent
		public Assignment getFluentAssignment_4_1() { return cFluentAssignment_4_1; }

		//Fluent
		public RuleCall getFluentFluentParserRuleCall_4_1_0() { return cFluentFluentParserRuleCall_4_1_0; }

		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}

	public class EventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Event");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEventNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cEventNameIDTerminalRuleCall_0_0 = (RuleCall)cEventNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cParamAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParamEventFeatureParserRuleCall_1_1_0 = (RuleCall)cParamAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cParamAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cParamEventFeatureParserRuleCall_1_2_1_0 = (RuleCall)cParamAssignment_1_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//Event:
		//	eventName=ID ("(" param+=EventFeature ("," param+=EventFeature)* ")")?;
		public ParserRule getRule() { return rule; }

		//eventName=ID ("(" param+=EventFeature ("," param+=EventFeature)* ")")?
		public Group getGroup() { return cGroup; }

		//eventName=ID
		public Assignment getEventNameAssignment_0() { return cEventNameAssignment_0; }

		//ID
		public RuleCall getEventNameIDTerminalRuleCall_0_0() { return cEventNameIDTerminalRuleCall_0_0; }

		//("(" param+=EventFeature ("," param+=EventFeature)* ")")?
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//param+=EventFeature
		public Assignment getParamAssignment_1_1() { return cParamAssignment_1_1; }

		//EventFeature
		public RuleCall getParamEventFeatureParserRuleCall_1_1_0() { return cParamEventFeatureParserRuleCall_1_1_0; }

		//("," param+=EventFeature)*
		public Group getGroup_1_2() { return cGroup_1_2; }

		//","
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }

		//param+=EventFeature
		public Assignment getParamAssignment_1_2_1() { return cParamAssignment_1_2_1; }

		//EventFeature
		public RuleCall getParamEventFeatureParserRuleCall_1_2_1_0() { return cParamEventFeatureParserRuleCall_1_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
	}

	public class FluentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Fluent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cToKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cValuePartAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValuePartToRuleParserRuleCall_1_1_0 = (RuleCall)cValuePartAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cInKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTimePartAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTimePartInRuleParserRuleCall_2_1_0 = (RuleCall)cTimePartAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cIfKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cCondPartAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cCondPartConditionRuleParserRuleCall_3_1_0 = (RuleCall)cCondPartAssignment_3_1.eContents().get(0);
		
		//Fluent:
		//	name=ID ("to" valuePart=ToRule) ("in" timePart=InRule)? ("if" condPart=ConditionRule)?;
		public ParserRule getRule() { return rule; }

		//name=ID ("to" valuePart=ToRule) ("in" timePart=InRule)? ("if" condPart=ConditionRule)?
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"to" valuePart=ToRule
		public Group getGroup_1() { return cGroup_1; }

		//"to"
		public Keyword getToKeyword_1_0() { return cToKeyword_1_0; }

		//valuePart=ToRule
		public Assignment getValuePartAssignment_1_1() { return cValuePartAssignment_1_1; }

		//ToRule
		public RuleCall getValuePartToRuleParserRuleCall_1_1_0() { return cValuePartToRuleParserRuleCall_1_1_0; }

		//("in" timePart=InRule)?
		public Group getGroup_2() { return cGroup_2; }

		//"in"
		public Keyword getInKeyword_2_0() { return cInKeyword_2_0; }

		//timePart=InRule
		public Assignment getTimePartAssignment_2_1() { return cTimePartAssignment_2_1; }

		//InRule
		public RuleCall getTimePartInRuleParserRuleCall_2_1_0() { return cTimePartInRuleParserRuleCall_2_1_0; }

		//("if" condPart=ConditionRule)?
		public Group getGroup_3() { return cGroup_3; }

		//"if"
		public Keyword getIfKeyword_3_0() { return cIfKeyword_3_0; }

		//condPart=ConditionRule
		public Assignment getCondPartAssignment_3_1() { return cCondPartAssignment_3_1; }

		//ConditionRule
		public RuleCall getCondPartConditionRuleParserRuleCall_3_1_0() { return cCondPartConditionRuleParserRuleCall_3_1_0; }
	}

	public class ConditionRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConditionRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionExpressionParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		
		//ConditionRule:
		//	{Expression} condition=Expression;
		public ParserRule getRule() { return rule; }

		//{Expression} condition=Expression
		public Group getGroup() { return cGroup; }

		//{Expression}
		public Action getExpressionAction_0() { return cExpressionAction_0; }

		//condition=Expression
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }

		//Expression
		public RuleCall getConditionExpressionParserRuleCall_1_0() { return cConditionExpressionParserRuleCall_1_0; }
	}

	public class ToRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ToRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionPlusOrMinusParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		
		//ToRule:
		//	{Expression} expression=PlusOrMinus;
		public ParserRule getRule() { return rule; }

		//{Expression} expression=PlusOrMinus
		public Group getGroup() { return cGroup; }

		//{Expression}
		public Action getExpressionAction_0() { return cExpressionAction_0; }

		//expression=PlusOrMinus
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }

		//PlusOrMinus
		public RuleCall getExpressionPlusOrMinusParserRuleCall_1_0() { return cExpressionPlusOrMinusParserRuleCall_1_0; }
	}

	public class InRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InRule");
		private final Assignment cTimeAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTimePlusOrMinusParserRuleCall_0 = (RuleCall)cTimeAssignment.eContents().get(0);
		
		//InRule:
		//	time=PlusOrMinus;
		public ParserRule getRule() { return rule; }

		//time=PlusOrMinus
		public Assignment getTimeAssignment() { return cTimeAssignment; }

		//PlusOrMinus
		public RuleCall getTimePlusOrMinusParserRuleCall_0() { return cTimePlusOrMinusParserRuleCall_0; }
	}

	public class EventFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EventFeature");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//EventFeature:
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final RuleCall cOrParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//// LEFT_ASSOCIATIVITY
		//Expression:
		//	Or;
		public ParserRule getRule() { return rule; }

		//Or
		public RuleCall getOrParserRuleCall() { return cOrParserRuleCall; }
	}

	public class OrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Or");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cORKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAndParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Or returns Expression:
		//	And ({Or.left=current} "OR" right=And)*;
		public ParserRule getRule() { return rule; }

		//And ({Or.left=current} "OR" right=And)*
		public Group getGroup() { return cGroup; }

		//And
		public RuleCall getAndParserRuleCall_0() { return cAndParserRuleCall_0; }

		//({Or.left=current} "OR" right=And)*
		public Group getGroup_1() { return cGroup_1; }

		//{Or.left=current}
		public Action getOrLeftAction_1_0() { return cOrLeftAction_1_0; }

		//"OR"
		public Keyword getORKeyword_1_1() { return cORKeyword_1_1; }

		//right=And
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//And
		public RuleCall getRightAndParserRuleCall_1_2_0() { return cRightAndParserRuleCall_1_2_0; }
	}

	public class AndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "And");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEqualityParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAndLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cANDKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightEqualityParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//And returns Expression:
		//	Equality ({And.left=current} "AND" right=Equality)*;
		public ParserRule getRule() { return rule; }

		//Equality ({And.left=current} "AND" right=Equality)*
		public Group getGroup() { return cGroup; }

		//Equality
		public RuleCall getEqualityParserRuleCall_0() { return cEqualityParserRuleCall_0; }

		//({And.left=current} "AND" right=Equality)*
		public Group getGroup_1() { return cGroup_1; }

		//{And.left=current}
		public Action getAndLeftAction_1_0() { return cAndLeftAction_1_0; }

		//"AND"
		public Keyword getANDKeyword_1_1() { return cANDKeyword_1_1; }

		//right=Equality
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Equality
		public RuleCall getRightEqualityParserRuleCall_1_2_0() { return cRightEqualityParserRuleCall_1_2_0; }
	}

	public class EqualityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Equality");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cComparisonParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cEqualityLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpEqualsSignEqualsSignKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpExclamationMarkEqualsSignKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightComparisonParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Equality returns Expression:
		//	Comparison ({Equality.left=current} op=("==" | "!=") right=Comparison)*;
		public ParserRule getRule() { return rule; }

		//Comparison ({Equality.left=current} op=("==" | "!=") right=Comparison)*
		public Group getGroup() { return cGroup; }

		//Comparison
		public RuleCall getComparisonParserRuleCall_0() { return cComparisonParserRuleCall_0; }

		//({Equality.left=current} op=("==" | "!=") right=Comparison)*
		public Group getGroup_1() { return cGroup_1; }

		//{Equality.left=current}
		public Action getEqualityLeftAction_1_0() { return cEqualityLeftAction_1_0; }

		//op=("==" | "!=")
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//"==" | "!="
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }

		//"=="
		public Keyword getOpEqualsSignEqualsSignKeyword_1_1_0_0() { return cOpEqualsSignEqualsSignKeyword_1_1_0_0; }

		//"!="
		public Keyword getOpExclamationMarkEqualsSignKeyword_1_1_0_1() { return cOpExclamationMarkEqualsSignKeyword_1_1_0_1; }

		//right=Comparison
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Comparison
		public RuleCall getRightComparisonParserRuleCall_1_2_0() { return cRightComparisonParserRuleCall_1_2_0; }
	}

	public class ComparisonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Comparison");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPlusOrMinusParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cComparisonLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpGreaterThanSignEqualsSignKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpLessThanSignEqualsSignKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Keyword cOpGreaterThanSignKeyword_1_1_0_2 = (Keyword)cOpAlternatives_1_1_0.eContents().get(2);
		private final Keyword cOpLessThanSignKeyword_1_1_0_3 = (Keyword)cOpAlternatives_1_1_0.eContents().get(3);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPlusOrMinusParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Comparison returns Expression:
		//	PlusOrMinus ({Comparison.left=current} op=(">=" | "<=" | ">" | "<") right=PlusOrMinus)*;
		public ParserRule getRule() { return rule; }

		//PlusOrMinus ({Comparison.left=current} op=(">=" | "<=" | ">" | "<") right=PlusOrMinus)*
		public Group getGroup() { return cGroup; }

		//PlusOrMinus
		public RuleCall getPlusOrMinusParserRuleCall_0() { return cPlusOrMinusParserRuleCall_0; }

		//({Comparison.left=current} op=(">=" | "<=" | ">" | "<") right=PlusOrMinus)*
		public Group getGroup_1() { return cGroup_1; }

		//{Comparison.left=current}
		public Action getComparisonLeftAction_1_0() { return cComparisonLeftAction_1_0; }

		//op=(">=" | "<=" | ">" | "<")
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//">=" | "<=" | ">" | "<"
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }

		//">="
		public Keyword getOpGreaterThanSignEqualsSignKeyword_1_1_0_0() { return cOpGreaterThanSignEqualsSignKeyword_1_1_0_0; }

		//"<="
		public Keyword getOpLessThanSignEqualsSignKeyword_1_1_0_1() { return cOpLessThanSignEqualsSignKeyword_1_1_0_1; }

		//">"
		public Keyword getOpGreaterThanSignKeyword_1_1_0_2() { return cOpGreaterThanSignKeyword_1_1_0_2; }

		//"<"
		public Keyword getOpLessThanSignKeyword_1_1_0_3() { return cOpLessThanSignKeyword_1_1_0_3; }

		//right=PlusOrMinus
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//PlusOrMinus
		public RuleCall getRightPlusOrMinusParserRuleCall_1_2_0() { return cRightPlusOrMinusParserRuleCall_1_2_0; }
	}

	public class PlusOrMinusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PlusOrMinus");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMulOrDivParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cPlusLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cMinusLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightMulOrDivParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//PlusOrMinus returns Expression:
		//	MulOrDiv (({Plus.left=current} "+" | {Minus.left=current} "-") right=MulOrDiv)*;
		public ParserRule getRule() { return rule; }

		//MulOrDiv (({Plus.left=current} "+" | {Minus.left=current} "-") right=MulOrDiv)*
		public Group getGroup() { return cGroup; }

		//MulOrDiv
		public RuleCall getMulOrDivParserRuleCall_0() { return cMulOrDivParserRuleCall_0; }

		//(({Plus.left=current} "+" | {Minus.left=current} "-") right=MulOrDiv)*
		public Group getGroup_1() { return cGroup_1; }

		//{Plus.left=current} "+" | {Minus.left=current} "-"
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//{Plus.left=current} "+"
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{Plus.left=current}
		public Action getPlusLeftAction_1_0_0_0() { return cPlusLeftAction_1_0_0_0; }

		//"+"
		public Keyword getPlusSignKeyword_1_0_0_1() { return cPlusSignKeyword_1_0_0_1; }

		//{Minus.left=current} "-"
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//{Minus.left=current}
		public Action getMinusLeftAction_1_0_1_0() { return cMinusLeftAction_1_0_1_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1_0_1_1() { return cHyphenMinusKeyword_1_0_1_1; }

		//right=MulOrDiv
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//MulOrDiv
		public RuleCall getRightMulOrDivParserRuleCall_1_1_0() { return cRightMulOrDivParserRuleCall_1_1_0; }
	}

	public class MulOrDivElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MulOrDiv");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cMulOrDivLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpAsteriskKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpSolidusKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Keyword cOpPercentSignKeyword_1_1_0_2 = (Keyword)cOpAlternatives_1_1_0.eContents().get(2);
		private final Keyword cOpCircumflexAccentKeyword_1_1_0_3 = (Keyword)cOpAlternatives_1_1_0.eContents().get(3);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPrimaryParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//MulOrDiv returns Expression:
		//	Primary ({MulOrDiv.left=current} op=("*" | "/" | "%" | "^") right=Primary)*;
		public ParserRule getRule() { return rule; }

		//Primary ({MulOrDiv.left=current} op=("*" | "/" | "%" | "^") right=Primary)*
		public Group getGroup() { return cGroup; }

		//Primary
		public RuleCall getPrimaryParserRuleCall_0() { return cPrimaryParserRuleCall_0; }

		//({MulOrDiv.left=current} op=("*" | "/" | "%" | "^") right=Primary)*
		public Group getGroup_1() { return cGroup_1; }

		//{MulOrDiv.left=current}
		public Action getMulOrDivLeftAction_1_0() { return cMulOrDivLeftAction_1_0; }

		//op=("*" | "/" | "%" | "^")
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//"*" | "/" | "%" | "^"
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }

		//"*"
		public Keyword getOpAsteriskKeyword_1_1_0_0() { return cOpAsteriskKeyword_1_1_0_0; }

		//"/"
		public Keyword getOpSolidusKeyword_1_1_0_1() { return cOpSolidusKeyword_1_1_0_1; }

		//"%"
		public Keyword getOpPercentSignKeyword_1_1_0_2() { return cOpPercentSignKeyword_1_1_0_2; }

		//"^"
		public Keyword getOpCircumflexAccentKeyword_1_1_0_3() { return cOpCircumflexAccentKeyword_1_1_0_3; }

		//right=Primary
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Primary
		public RuleCall getRightPrimaryParserRuleCall_1_2_0() { return cRightPrimaryParserRuleCall_1_2_0; }
	}

	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cNotAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cExpressionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExpressionPrimaryParserRuleCall_1_2_0 = (RuleCall)cExpressionAssignment_1_2.eContents().get(0);
		private final RuleCall cAtomicParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Primary returns Expression:
		//	"(" Expression ")" | {Not} "!" expression=Primary | Atomic;
		public ParserRule getRule() { return rule; }

		//"(" Expression ")" | {Not} "!" expression=Primary | Atomic
		public Alternatives getAlternatives() { return cAlternatives; }

		//"(" Expression ")"
		public Group getGroup_0() { return cGroup_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }

		//Expression
		public RuleCall getExpressionParserRuleCall_0_1() { return cExpressionParserRuleCall_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }

		//{Not} "!" expression=Primary
		public Group getGroup_1() { return cGroup_1; }

		//{Not}
		public Action getNotAction_1_0() { return cNotAction_1_0; }

		//"!"
		public Keyword getExclamationMarkKeyword_1_1() { return cExclamationMarkKeyword_1_1; }

		//expression=Primary
		public Assignment getExpressionAssignment_1_2() { return cExpressionAssignment_1_2; }

		//Primary
		public RuleCall getExpressionPrimaryParserRuleCall_1_2_0() { return cExpressionPrimaryParserRuleCall_1_2_0; }

		//Atomic
		public RuleCall getAtomicParserRuleCall_2() { return cAtomicParserRuleCall_2; }
	}

	public class AtomicElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Atomic");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cFloatConstantAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValueFLOATTerminalRuleCall_0_1_0 = (RuleCall)cValueAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cIntConstantAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cBoolConstantAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final Alternatives cValueAlternatives_2_1_0 = (Alternatives)cValueAssignment_2_1.eContents().get(0);
		private final Keyword cValueTrueKeyword_2_1_0_0 = (Keyword)cValueAlternatives_2_1_0.eContents().get(0);
		private final Keyword cValueFalseKeyword_2_1_0_1 = (Keyword)cValueAlternatives_2_1_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cReferenceAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cRefAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cRefReferenceTypeCrossReference_3_1_0 = (CrossReference)cRefAssignment_3_1.eContents().get(0);
		private final RuleCall cRefReferenceTypeIDTerminalRuleCall_3_1_0_1 = (RuleCall)cRefReferenceTypeCrossReference_3_1_0.eContents().get(1);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cFluentValueSampleAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cFluentValueSampleINTTerminalRuleCall_3_2_1_0 = (RuleCall)cFluentValueSampleAssignment_3_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_2_2 = (Keyword)cGroup_3_2.eContents().get(2);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cCurrentTimeAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Assignment cValueAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final Keyword cValueNowKeyword_4_1_0 = (Keyword)cValueAssignment_4_1.eContents().get(0);
		
		//Atomic returns Expression:
		//	{FloatConstant} value=FLOAT | {IntConstant} value=INT | {BoolConstant} value=("true" | "false") | {Reference}
		//	ref=[ReferenceType] ("(" fluentValueSample=INT ")")? | {CurrentTime} value="now";
		public ParserRule getRule() { return rule; }

		//{FloatConstant} value=FLOAT | {IntConstant} value=INT | {BoolConstant} value=("true" | "false") | {Reference}
		//ref=[ReferenceType] ("(" fluentValueSample=INT ")")? | {CurrentTime} value="now"
		public Alternatives getAlternatives() { return cAlternatives; }

		//{FloatConstant} value=FLOAT
		public Group getGroup_0() { return cGroup_0; }

		//{FloatConstant}
		public Action getFloatConstantAction_0_0() { return cFloatConstantAction_0_0; }

		//value=FLOAT
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }

		//FLOAT
		public RuleCall getValueFLOATTerminalRuleCall_0_1_0() { return cValueFLOATTerminalRuleCall_0_1_0; }

		//{IntConstant} value=INT
		public Group getGroup_1() { return cGroup_1; }

		//{IntConstant}
		public Action getIntConstantAction_1_0() { return cIntConstantAction_1_0; }

		//value=INT
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_1_1_0() { return cValueINTTerminalRuleCall_1_1_0; }

		//{BoolConstant} value=("true" | "false")
		public Group getGroup_2() { return cGroup_2; }

		//{BoolConstant}
		public Action getBoolConstantAction_2_0() { return cBoolConstantAction_2_0; }

		//value=("true" | "false")
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }

		//"true" | "false"
		public Alternatives getValueAlternatives_2_1_0() { return cValueAlternatives_2_1_0; }

		//"true"
		public Keyword getValueTrueKeyword_2_1_0_0() { return cValueTrueKeyword_2_1_0_0; }

		//"false"
		public Keyword getValueFalseKeyword_2_1_0_1() { return cValueFalseKeyword_2_1_0_1; }

		//{Reference} ref=[ReferenceType] ("(" fluentValueSample=INT ")")?
		public Group getGroup_3() { return cGroup_3; }

		//{Reference}
		public Action getReferenceAction_3_0() { return cReferenceAction_3_0; }

		//ref=[ReferenceType]
		public Assignment getRefAssignment_3_1() { return cRefAssignment_3_1; }

		//[ReferenceType]
		public CrossReference getRefReferenceTypeCrossReference_3_1_0() { return cRefReferenceTypeCrossReference_3_1_0; }

		//ID
		public RuleCall getRefReferenceTypeIDTerminalRuleCall_3_1_0_1() { return cRefReferenceTypeIDTerminalRuleCall_3_1_0_1; }

		//("(" fluentValueSample=INT ")")?
		public Group getGroup_3_2() { return cGroup_3_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_2_0() { return cLeftParenthesisKeyword_3_2_0; }

		//fluentValueSample=INT
		public Assignment getFluentValueSampleAssignment_3_2_1() { return cFluentValueSampleAssignment_3_2_1; }

		//INT
		public RuleCall getFluentValueSampleINTTerminalRuleCall_3_2_1_0() { return cFluentValueSampleINTTerminalRuleCall_3_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3_2_2() { return cRightParenthesisKeyword_3_2_2; }

		//{CurrentTime} value="now"
		public Group getGroup_4() { return cGroup_4; }

		//{CurrentTime}
		public Action getCurrentTimeAction_4_0() { return cCurrentTimeAction_4_0; }

		//value="now"
		public Assignment getValueAssignment_4_1() { return cValueAssignment_4_1; }

		//"now"
		public Keyword getValueNowKeyword_4_1_0() { return cValueNowKeyword_4_1_0; }
	}

	public class ReferenceTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ReferenceType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEventFeatureParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFluentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ReferenceType:
		//	EventFeature | Fluent;
		public ParserRule getRule() { return rule; }

		//EventFeature | Fluent
		public Alternatives getAlternatives() { return cAlternatives; }

		//EventFeature
		public RuleCall getEventFeatureParserRuleCall_0() { return cEventFeatureParserRuleCall_0; }

		//Fluent
		public RuleCall getFluentParserRuleCall_1() { return cFluentParserRuleCall_1; }
	}
	
	
	private DroolsModelElements pDroolsModel;
	private StatementElements pStatement;
	private EventElements pEvent;
	private FluentElements pFluent;
	private ConditionRuleElements pConditionRule;
	private ToRuleElements pToRule;
	private InRuleElements pInRule;
	private EventFeatureElements pEventFeature;
	private ExpressionElements pExpression;
	private OrElements pOr;
	private AndElements pAnd;
	private EqualityElements pEquality;
	private ComparisonElements pComparison;
	private PlusOrMinusElements pPlusOrMinus;
	private MulOrDivElements pMulOrDiv;
	private PrimaryElements pPrimary;
	private AtomicElements pAtomic;
	private ReferenceTypeElements pReferenceType;
	private TerminalRule tFLOAT;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public DdslGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.project.droolsDSL.Ddsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//DroolsModel:
	//	statements+=Statement*;
	public DroolsModelElements getDroolsModelAccess() {
		return (pDroolsModel != null) ? pDroolsModel : (pDroolsModel = new DroolsModelElements());
	}
	
	public ParserRule getDroolsModelRule() {
		return getDroolsModelAccess().getRule();
	}

	//Statement:
	//	"on" event=Event "set" fluent+=Fluent ("," fluent+=Fluent)* ";";
	public StatementElements getStatementAccess() {
		return (pStatement != null) ? pStatement : (pStatement = new StatementElements());
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}

	//Event:
	//	eventName=ID ("(" param+=EventFeature ("," param+=EventFeature)* ")")?;
	public EventElements getEventAccess() {
		return (pEvent != null) ? pEvent : (pEvent = new EventElements());
	}
	
	public ParserRule getEventRule() {
		return getEventAccess().getRule();
	}

	//Fluent:
	//	name=ID ("to" valuePart=ToRule) ("in" timePart=InRule)? ("if" condPart=ConditionRule)?;
	public FluentElements getFluentAccess() {
		return (pFluent != null) ? pFluent : (pFluent = new FluentElements());
	}
	
	public ParserRule getFluentRule() {
		return getFluentAccess().getRule();
	}

	//ConditionRule:
	//	{Expression} condition=Expression;
	public ConditionRuleElements getConditionRuleAccess() {
		return (pConditionRule != null) ? pConditionRule : (pConditionRule = new ConditionRuleElements());
	}
	
	public ParserRule getConditionRuleRule() {
		return getConditionRuleAccess().getRule();
	}

	//ToRule:
	//	{Expression} expression=PlusOrMinus;
	public ToRuleElements getToRuleAccess() {
		return (pToRule != null) ? pToRule : (pToRule = new ToRuleElements());
	}
	
	public ParserRule getToRuleRule() {
		return getToRuleAccess().getRule();
	}

	//InRule:
	//	time=PlusOrMinus;
	public InRuleElements getInRuleAccess() {
		return (pInRule != null) ? pInRule : (pInRule = new InRuleElements());
	}
	
	public ParserRule getInRuleRule() {
		return getInRuleAccess().getRule();
	}

	//EventFeature:
	//	name=ID;
	public EventFeatureElements getEventFeatureAccess() {
		return (pEventFeature != null) ? pEventFeature : (pEventFeature = new EventFeatureElements());
	}
	
	public ParserRule getEventFeatureRule() {
		return getEventFeatureAccess().getRule();
	}

	//// LEFT_ASSOCIATIVITY
	//Expression:
	//	Or;
	public ExpressionElements getExpressionAccess() {
		return (pExpression != null) ? pExpression : (pExpression = new ExpressionElements());
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//Or returns Expression:
	//	And ({Or.left=current} "OR" right=And)*;
	public OrElements getOrAccess() {
		return (pOr != null) ? pOr : (pOr = new OrElements());
	}
	
	public ParserRule getOrRule() {
		return getOrAccess().getRule();
	}

	//And returns Expression:
	//	Equality ({And.left=current} "AND" right=Equality)*;
	public AndElements getAndAccess() {
		return (pAnd != null) ? pAnd : (pAnd = new AndElements());
	}
	
	public ParserRule getAndRule() {
		return getAndAccess().getRule();
	}

	//Equality returns Expression:
	//	Comparison ({Equality.left=current} op=("==" | "!=") right=Comparison)*;
	public EqualityElements getEqualityAccess() {
		return (pEquality != null) ? pEquality : (pEquality = new EqualityElements());
	}
	
	public ParserRule getEqualityRule() {
		return getEqualityAccess().getRule();
	}

	//Comparison returns Expression:
	//	PlusOrMinus ({Comparison.left=current} op=(">=" | "<=" | ">" | "<") right=PlusOrMinus)*;
	public ComparisonElements getComparisonAccess() {
		return (pComparison != null) ? pComparison : (pComparison = new ComparisonElements());
	}
	
	public ParserRule getComparisonRule() {
		return getComparisonAccess().getRule();
	}

	//PlusOrMinus returns Expression:
	//	MulOrDiv (({Plus.left=current} "+" | {Minus.left=current} "-") right=MulOrDiv)*;
	public PlusOrMinusElements getPlusOrMinusAccess() {
		return (pPlusOrMinus != null) ? pPlusOrMinus : (pPlusOrMinus = new PlusOrMinusElements());
	}
	
	public ParserRule getPlusOrMinusRule() {
		return getPlusOrMinusAccess().getRule();
	}

	//MulOrDiv returns Expression:
	//	Primary ({MulOrDiv.left=current} op=("*" | "/" | "%" | "^") right=Primary)*;
	public MulOrDivElements getMulOrDivAccess() {
		return (pMulOrDiv != null) ? pMulOrDiv : (pMulOrDiv = new MulOrDivElements());
	}
	
	public ParserRule getMulOrDivRule() {
		return getMulOrDivAccess().getRule();
	}

	//Primary returns Expression:
	//	"(" Expression ")" | {Not} "!" expression=Primary | Atomic;
	public PrimaryElements getPrimaryAccess() {
		return (pPrimary != null) ? pPrimary : (pPrimary = new PrimaryElements());
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}

	//Atomic returns Expression:
	//	{FloatConstant} value=FLOAT | {IntConstant} value=INT | {BoolConstant} value=("true" | "false") | {Reference}
	//	ref=[ReferenceType] ("(" fluentValueSample=INT ")")? | {CurrentTime} value="now";
	public AtomicElements getAtomicAccess() {
		return (pAtomic != null) ? pAtomic : (pAtomic = new AtomicElements());
	}
	
	public ParserRule getAtomicRule() {
		return getAtomicAccess().getRule();
	}

	//ReferenceType:
	//	EventFeature | Fluent;
	public ReferenceTypeElements getReferenceTypeAccess() {
		return (pReferenceType != null) ? pReferenceType : (pReferenceType = new ReferenceTypeElements());
	}
	
	public ParserRule getReferenceTypeRule() {
		return getReferenceTypeAccess().getRule();
	}

	//terminal FLOAT returns ecore::EFloat:
	//	"0".."9"* "." "0".."9"+;
	public TerminalRule getFLOATRule() {
		return (tFLOAT != null) ? tFLOAT : (tFLOAT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "FLOAT"));
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
