/*
 * generated by Xtext
 */
package org.project.droolsDSL.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IGenerator
import org.eclipse.xtext.generator.IFileSystemAccess
import org.project.droolsDSL.ddsl.Statement
import java.util.Map
import java.util.HashMap
import java.util.List
import java.util.ArrayList

import org.project.droolsDSL.ddsl.impl.ExpressionImpl
import org.project.droolsDSL.ddsl.impl.IntConstantImpl
import org.project.droolsDSL.ddsl.impl.FloatConstantImpl
import org.project.droolsDSL.ddsl.impl.PlusImpl
import org.project.droolsDSL.ddsl.impl.BoolConstantImpl
import org.project.droolsDSL.ddsl.ConditionRule
import org.project.droolsDSL.utils.Statement_Context
import org.project.droolsDSL.ddsl.impl.MinusImpl
import org.project.droolsDSL.ddsl.impl.MulOrDivImpl
import org.project.droolsDSL.ddsl.Expression
import org.project.droolsDSL.ddsl.impl.OrImpl
import org.project.droolsDSL.ddsl.impl.AndImpl
import org.project.droolsDSL.ddsl.impl.EqualityImpl
import org.project.droolsDSL.ddsl.impl.ComparisonImpl
import org.project.droolsDSL.ddsl.impl.ReferenceImpl
import org.project.droolsDSL.ddsl.impl.NotImpl
import org.project.droolsDSL.ddsl.impl.ReferenceTypeImpl
import org.project.droolsDSL.ddsl.impl.FluentImpl
import org.project.droolsDSL.ddsl.impl.EventFeatureImpl
import org.project.droolsDSL.ddsl.impl.CurrentTimeImpl

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
class DdslGenerator implements IGenerator {
	
	var List<Statement_Context> statement_List= new ArrayList<Statement_Context>();

	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		statement_List.clear	
		for (e: resource.allContents.toIterable.filter(typeof(Statement))){
			var List<String> fluents = new ArrayList<String>();
			fluents.clear
			
			var List<String> params = new ArrayList<String>();
			params.clear		
			
			var String eventNameTemp = "";
			eventNameTemp = e.event.eventName;
			
			if (e.event.param != null){
			for(p:e.event.param) {params.add(p.name)}}
				
			var Map <String, Object[]> fluentContextTemp = new HashMap<String, Object[]>()
			for (f:e.fluent) {
				
				var toValueTemp = f.valuePart
				
				//if time=0 --> NO TIME
				var Expression timeTemp =null
				if (f.timePart!=null){ timeTemp =f.timePart.time}
				
				//if cond=null ---> NO CONDITION
				var ConditionRule condTemp = null
				if (f.condPart!=null){condTemp =f.condPart}
				
				var List<Object> contextTemp = new ArrayList<Object>();
				contextTemp.clear
				contextTemp.add(toValueTemp)
				contextTemp.add(timeTemp)
				contextTemp.add(condTemp)
				
				fluentContextTemp.put(f.name, contextTemp)
			}
			
			statement_List.add(new Statement_Context(eventNameTemp,params, fluentContextTemp))
			
		}

		// Move To The End
		fsa.generateFile('''models/MainModel_«System.currentTimeMillis.toString»_Time.java''', compileMain)

	}

	/**_____Compile Method_____**/
	def compileMain() {
		'''
		package models;
		
		//IMPORTs
		import it.bragaglia.freckles.model.*;
		
		public class MainModel_«System.currentTimeMillis»_Time {

			public static void main (String[] args) {
				«FOR statementCurr: statement_List»
				public List<Effect> effect_List_«statement_List.indexOf(statementCurr)»= new ArrayList<Effect>();
					effect_List_«statement_List.indexOf(statementCurr)».clear();
				«ENDFOR»
				
				public Model model = new ModelImpl();
				
				//PRINT_MAPs
				
				//Class StateContext
				«FOR statementCurr: statement_List»
				/*
				«statementCurr.eventName» --> params:«FOR paramName:statementCurr.params»«paramName», «ENDFOR»
							«FOR f: statementCurr.fluents» 
							«f»: TO= «statementCurr.getExpression(f)»; IN=«statementCurr.getTime(f)»; IF=«statementCurr.getCondition(f)»
							«ENDFOR»
				*/
				
				«ENDFOR»
				
				«FOR statementCurr: statement_List»
					«FOR f:statementCurr.fluents»
						«var ExpressionImpl exprImplTemp =  statementCurr.getExpression(f) as ExpressionImpl»
						«compileExpr(statementCurr.eventName, statement_List.indexOf(statementCurr), f, exprImplTemp)»
					«ENDFOR»
				«ENDFOR»	

				// model.add("turnOn", effects);
				«FOR statementCurr: statement_List»
				model.add("«statementCurr.eventName»",«
				»effect_List_«statement_List.indexOf(statementCurr)»);
				«ENDFOR»

				System.out.println("Done.");

			}
		}
		'''
	}


/*________________________________________________________________________________________*/
	/**_____Parameter Instance_____**/
	def compileParam(String eventName, int statementNum){
		'''
		«IF statement_List.get(statementNum).params!=null»
			String paramsOfStatement_«statementNum»[] = new String[«statement_List.get(statementNum).params.length»];
			«FOR p: statement_List.get(statementNum).params»
				paramsOfStatement_«statementNum»[«statement_List.get(statementNum).params.indexOf(p)»] = new ParameterDescr("«p»");
			«ENDFOR»
		«ENDIF»
		'''
	}
	

/*________________________________________________________________________________________*/
	/**_____Simple Expression Case_____**/
	def dispatch compileTerminalRight(String eventName, int statementNum, String fluentName, ExpressionImpl term){
		switch term{
			IntConstantImpl:{'''new NumberDescr(«term.value»)'''}
			FloatConstantImpl:{'''new NumberDescr(«term.value»)'''}
			BoolConstantImpl:{'''new NumberDescr(«term.value»)'''}
		}				
	}
	def dispatch compileTerminalLeft(String eventName, int statementNum, String fluentName, ExpressionImpl term){
		switch term{
			IntConstantImpl:{'''new NumberDescr(«term.value»)'''}
			FloatConstantImpl:{'''new NumberDescr(«term.value»)'''}
			BoolConstantImpl:{'''new NumberDescr(«term.value»)'''}
		}				
	}
	def dispatch compileTerminalRight(String eventName, int statementNum, String fluentName, ReferenceTypeImpl term){
		switch term{
			EventFeatureImpl:{'''new ParameterDescr("«term.name»")'''}
			FluentImpl:{'''new SampleDescr("«term.name»")'''}
		}				
	}
	def dispatch compileTerminalLeft(String eventName, int statementNum, String fluentName, ReferenceTypeImpl term){
		switch term{
			EventFeatureImpl:{'''new ParameterDescr(«term.name»)'''}
			FluentImpl:{'''new SampleDescr(«term.name»)'''}
		}				
	}
	
/*________________________________________________________________________________________*/
	/** HARD Expression Case */		
	def dispatch compileRecExpr (String eventName, int statementNum, String fluentName, IntConstantImpl conditionExpr){
		'''new NumberDescr(«conditionExpr.value»)'''
	}
	def dispatch compileRecExpr (String eventName, int statementNum, String fluentName, FloatConstantImpl conditionExpr){
		'''new NumberDescr(«conditionExpr.value»)'''
	}
	def dispatch compileRecExpr (String eventName, int statementNum, String fluentName, BoolConstantImpl conditionExpr){
		'''new NumberDescr(«conditionExpr.value»)'''
	}
	def dispatch compileRecExpr (String eventName, int statementNum, String fluentName, ReferenceImpl conditionExpr){
		'''
		«IF conditionExpr.ref.eClass.name.contains("Feature")»
			new ParameterDescr("«conditionExpr.ref.name»")
		«ELSE»
			new SampleDescr("«conditionExpr.ref.name»")
		«ENDIF»
		'''
	}
	def dispatch compileRecExpr (String eventName, int statementNum, String fluentName, PlusImpl conditionExpr){
		'''
			«IF conditionExpr.left.eClass.name.contains("Constant") && conditionExpr.right.eClass.name.contains("Constant")»
				new PlusDescr( «compileTerminalLeft(eventName, statementNum,fluentName,conditionExpr.left as ExpressionImpl)»,«
				»«compileTerminalLeft(eventName, statementNum,fluentName,conditionExpr.right as ExpressionImpl)»)
			«ELSE»
				«IF conditionExpr.left.eClass.name.contains("Constant")»
					new PlusDescr(«compileTerminalLeft(eventName, statementNum,fluentName,conditionExpr.left as ExpressionImpl)»,
					«compileRecExpr(eventName, statementNum,fluentName,conditionExpr.right as ExpressionImpl)»)
				«ENDIF»
				«IF !conditionExpr.left.eClass.name.contains("Constant")»
					new PlusDescr(«compileRecExpr(eventName, statementNum,fluentName,conditionExpr.left as ExpressionImpl)»,
					«compileRecExpr(eventName, statementNum,fluentName,conditionExpr.right as ExpressionImpl)»)«
				»«ENDIF»
			«ENDIF»
		'''	
	}
	def dispatch compileRecExpr (String eventName, int statementNum, String fluentName, MinusImpl conditionExpr){
		'''
			«IF conditionExpr.left.eClass.name.contains("Constant") && conditionExpr.right.eClass.name.contains("Constant")»
				new MinusDescr( «compileTerminalLeft(eventName, statementNum,fluentName,conditionExpr.left as ExpressionImpl)»,«
				»«compileTerminalLeft(eventName, statementNum,fluentName,conditionExpr.right as ExpressionImpl)»)
			«ELSE»
				«IF conditionExpr.left.eClass.name.contains("Constant")»
					new MinusDescr(«compileTerminalLeft(eventName, statementNum,fluentName,conditionExpr.left as ExpressionImpl)»,
					«compileRecExpr(eventName, statementNum,fluentName,conditionExpr.right as ExpressionImpl)»)
				«ENDIF»
				«IF !conditionExpr.left.eClass.name.contains("Constant")»
					new MinusDescr(«compileRecExpr(eventName, statementNum,fluentName,conditionExpr.left as ExpressionImpl)»,
					«compileRecExpr(eventName, statementNum,fluentName,conditionExpr.right as ExpressionImpl)»)«
				»«ENDIF»
			«ENDIF»
		'''
	}
	def dispatch compileRecExpr (String eventName, int statementNum, String fluentName, MulOrDivImpl conditionExpr){
		'''
			«IF conditionExpr.op.equals("*")»
				«IF conditionExpr.left.eClass.name.contains("Constant") && conditionExpr.right.eClass.name.contains("Constant")»
					new ModulusDescr( «compileTerminalLeft(eventName, statementNum,fluentName,conditionExpr.left as ExpressionImpl)»,«
					»«compileTerminalLeft(eventName, statementNum,fluentName,conditionExpr.right as ExpressionImpl)»)
				«ELSE»
					«IF conditionExpr.left.eClass.name.contains("Constant")»
						new ModulusDescr(«compileTerminalLeft(eventName, statementNum,fluentName,conditionExpr.left as ExpressionImpl)»,
						«compileRecExpr(eventName, statementNum,fluentName,conditionExpr.right as ExpressionImpl)»)
					«ENDIF»
					«IF !conditionExpr.left.eClass.name.contains("Constant")»
						new ModulusDescr(«compileRecExpr(eventName, statementNum,fluentName,conditionExpr.left as ExpressionImpl)»,
						«compileRecExpr(eventName, statementNum,fluentName,conditionExpr.right as ExpressionImpl)»)«
					»«ENDIF»
				«ENDIF»
			«ELSE»
				«IF conditionExpr.left.eClass.name.contains("Constant") && conditionExpr.right.eClass.name.contains("Constant")»
					new ObelusDescr( «compileTerminalLeft(eventName, statementNum,fluentName,conditionExpr.left as ExpressionImpl)»,«
					»«compileTerminalLeft(eventName, statementNum,fluentName,conditionExpr.right as ExpressionImpl)»)
				«ELSE»
					«IF conditionExpr.left.eClass.name.contains("Constant")»
						new ObelusDescr(«compileTerminalLeft(eventName, statementNum,fluentName,conditionExpr.left as ExpressionImpl)»,
						«compileRecExpr(eventName, statementNum,fluentName,conditionExpr.right as ExpressionImpl)»)
					«ENDIF»
					«IF !conditionExpr.left.eClass.name.contains("Constant")»
						new ObelusDescr(«compileRecExpr(eventName, statementNum,fluentName,conditionExpr.left as ExpressionImpl)»,
						«compileRecExpr(eventName, statementNum,fluentName,conditionExpr.right as ExpressionImpl)»)«
					»«ENDIF»
				«ENDIF»
			«ENDIF»
		'''
	}
	
	
	
/*________________________________________________________________________________________*/	
	/** FIRST compile call Case */	
	def /*dispatch*/ compileExpr (String eventName, int statementNum, String fluentName, ExpressionImpl conditionExpr){
		var espr = conditionExpr.expression
		switch espr{
			ReferenceTypeImpl:{
				'''
«««				TESTING
				«IF conditionExpr.eClass.name.contains("Feature")»
					// compileExpr ReferenceTypeImpl Feature
				«ELSE»
					// compileExpr ReferenceTypeImpl Fluent
				«ENDIF»
				'''
			}		
			BoolConstantImpl:{
				'''
				// Statement «statementNum» proceed...
				«compileParam(eventName, statementNum)»
				ExpressionDescr _«eventName.toFirstLower»_«fluentName»_«statementNum»_ToValue_Bool = new NumberDescr(«espr.value»);

				«IF statement_List.get(statementNum).getCondition(fluentName) != null»
					«compileCond(eventName,statementNum, fluentName, statement_List.get(statementNum).getCondition(fluentName) as ExpressionImpl, "Bool")»
				«ELSE»
					«compileContextEffect(eventName, statementNum, fluentName, "Bool", null)»
				«ENDIF»
				'''
			}
			IntConstantImpl:{
				'''
				// Statement «statementNum» proceed...
				«compileParam(eventName, statementNum)»
				ExpressionDescr _«eventName.toFirstLower»_«fluentName»_«statementNum»_ToValue_Int = new NumberDescr(«espr.value»);

				«IF statement_List.get(statementNum).getCondition(fluentName) != null»
					«compileCond(eventName,statementNum, fluentName, statement_List.get(statementNum).getCondition(fluentName) as ExpressionImpl, "Int")»
				«ELSE»
					«compileContextEffect(eventName, statementNum, fluentName, "Int", null)»
				«ENDIF»
				'''
			}
			FloatConstantImpl:{
				'''
				// Statement «statementNum» proceed...
				«compileParam(eventName, statementNum)»
				ExpressionDescr _«eventName.toFirstLower»_«fluentName»_«statementNum»_ToValue_Float = new NumberDescr(«espr.value»);

				«IF statement_List.get(statementNum).getCondition(fluentName) != null»
					«compileCond(eventName,statementNum, fluentName, statement_List.get(statementNum).getCondition(fluentName) as ExpressionImpl, "Float")»
				«ELSE»
					«compileContextEffect(eventName, statementNum, fluentName, "Float", null)»
				«ENDIF»
				'''
			}
			PlusImpl:{	
				'''
				// Statement «statementNum» proceed...
				
				«compileParam(eventName, statementNum)»
«««				Simple case 1+2				
				«IF espr.left.eClass.name.contains("Constant") && espr.right.eClass.name.contains("Constant")»

					ExpressionDescr _«eventName.toFirstLower»_«fluentName»_«statementNum»_ToValue_Plus = «
					» new PlusDescr( «compileTerminalLeft(eventName, statementNum,fluentName,espr.left as ExpressionImpl)»,«
						»«compileTerminalRight(eventName, statementNum,fluentName,espr.right as ExpressionImpl)»);
				«ELSE»
«««					Case 1+(2+3)
					«IF espr.left.eClass.name.contains("Constant")»
						ExpressionDescr _«eventName.toFirstLower»_«fluentName»_«statementNum»_ToValue_Plus = «
						» new PlusDescr(«compileTerminalLeft(eventName, statementNum,fluentName,espr.left as ExpressionImpl)»,
						«compileRecExpr(eventName, statementNum,fluentName,espr.right as ExpressionImpl)»);
					«ENDIF»
«««					Case 1+2+3
					«IF !espr.left.eClass.name.contains("Constant")»
						ExpressionDescr _«eventName.toFirstLower»_«fluentName»_«statementNum»_ToValue_Plus = «
						» new PlusDescr(«compileRecExpr(eventName, statementNum,fluentName,espr.left as ExpressionImpl)»,
						«compileRecExpr(eventName, statementNum,fluentName,espr.right as ExpressionImpl)»);
					«ENDIF»
				«ENDIF»
				
				«IF statement_List.get(statementNum).getCondition(fluentName) != null»
					«compileCond(eventName,statementNum, fluentName, statement_List.get(statementNum).getCondition(fluentName) as ExpressionImpl, "Plus")»
				«ELSE»
					«compileContextEffect(eventName, statementNum, fluentName, "Plus", null)»
				«ENDIF»
				'''			
			}
			
			MinusImpl:{
				'''
				// Statement «statementNum» proceed...
				
				«compileParam(eventName, statementNum)»
				«IF espr.left.eClass.name.contains("Constant") && espr.right.eClass.name.contains("Constant")»

					ExpressionDescr _«eventName.toFirstLower»_«fluentName»_«statementNum»_ToValue_Minus = «
					» new MinusDescr( «compileTerminalLeft(eventName, statementNum,fluentName,espr.left as ExpressionImpl)»,«
						»«compileTerminalRight(eventName, statementNum,fluentName,espr.right as ExpressionImpl)»);
				«ELSE»
					«IF espr.left.eClass.name.contains("Constant")»
						ExpressionDescr _«eventName.toFirstLower»_«fluentName»_«statementNum»_ToValue_Minus = «
						» new MinusDescr(«compileTerminalLeft(eventName, statementNum,fluentName,espr.left as ExpressionImpl)»,
						«compileRecExpr(eventName, statementNum,fluentName,espr.right as ExpressionImpl)»);
					«ENDIF»
					«IF !espr.left.eClass.name.contains("Constant")»
						ExpressionDescr _«eventName.toFirstLower»_«fluentName»_«statementNum»_ToValue_Minus = «
						» new MinusDescr(«compileRecExpr(eventName, statementNum,fluentName,espr.left as ExpressionImpl)»,
						«compileRecExpr(eventName, statementNum,fluentName,espr.right as ExpressionImpl)»);
					«ENDIF»
				«ENDIF»

				«IF statement_List.get(statementNum).getCondition(fluentName) != null»
					«compileCond(eventName,statementNum, fluentName, statement_List.get(statementNum).getCondition(fluentName) as ExpressionImpl, "Minus")»
				«ELSE»
					«compileContextEffect(eventName, statementNum, fluentName, "Minus", null)»
				«ENDIF»
				'''
			}

			MulOrDivImpl: {
				'''
				«IF espr.op.equals("*")»
					// Statement «statementNum» proceed...

					«compileParam(eventName, statementNum)»
					«IF espr.left.eClass.name.contains("Constant") && espr.right.eClass.name.contains("Constant")»

						ExpressionDescr _«eventName.toFirstLower»_«fluentName»_«statementNum»_ToValue_Modulus = «
						» new ModulusDescr( «compileTerminalLeft(eventName, statementNum,fluentName,espr.left as ExpressionImpl)»,«
							»«compileTerminalRight(eventName, statementNum,fluentName,espr.right as ExpressionImpl)»);
					«ELSE»
						«IF espr.left.eClass.name.contains("Constant")»
							ExpressionDescr _«eventName.toFirstLower»_«fluentName»_«statementNum»_ToValue_Modulus = «
							» new ModulusDescr(«compileTerminalLeft(eventName, statementNum,fluentName,espr.left as ExpressionImpl)»,
							«compileRecExpr(eventName, statementNum,fluentName,espr.right as ExpressionImpl)»);
						«ENDIF»
						«IF !espr.left.eClass.name.contains("Constant")»
							ExpressionDescr _«eventName.toFirstLower»_«fluentName»_«statementNum»_ToValue_Modulus = «
							» new ModulusDescr(«compileRecExpr(eventName, statementNum,fluentName,espr.left as ExpressionImpl)»,
							«compileRecExpr(eventName, statementNum,fluentName,espr.right as ExpressionImpl)»);
						«ENDIF»
					«ENDIF»
					
					«IF statement_List.get(statementNum).getCondition(fluentName) != null»
						«compileCond(eventName,statementNum, fluentName, statement_List.get(statementNum).getCondition(fluentName) as ExpressionImpl, "Modulus")»
					«ELSE»
						«compileContextEffect(eventName, statementNum, fluentName, "Modulus", null)»
					«ENDIF»
				«ELSE»
					// Statement «statementNum» proceed...

					«compileParam(eventName, statementNum)»
					«IF espr.left.eClass.name.contains("Constant") && espr.right.eClass.name.contains("Constant")»

						ExpressionDescr _«eventName.toFirstLower»_«fluentName»_«statementNum»_ToValue_Obelus = «
						» new ObelusDescr( «compileTerminalLeft(eventName, statementNum,fluentName,espr.left as ExpressionImpl)»,«
							»«compileTerminalRight(eventName, statementNum,fluentName,espr.right as ExpressionImpl)»);
					«ELSE»
						«IF espr.left.eClass.name.contains("Constant")»
							ExpressionDescr _«eventName.toFirstLower»_«fluentName»_«statementNum»_ToValue_Obelus = «
							» new ObelusDescr(«compileTerminalLeft(eventName, statementNum,fluentName,espr.left as ExpressionImpl)»,
							«compileRecExpr(eventName, statementNum,fluentName,espr.right as ExpressionImpl)»);						
						«ENDIF»
						«IF !espr.left.eClass.name.contains("Constant")»
							ExpressionDescr _«eventName.toFirstLower»_«fluentName»_«statementNum»_ToValue_Obelus = «
							» new ObelusDescr(«compileRecExpr(eventName, statementNum,fluentName,espr.left as ExpressionImpl)»,
							«compileRecExpr(eventName, statementNum,fluentName,espr.right as ExpressionImpl)»);
						«ENDIF»
					«ENDIF»
					
					«IF statement_List.get(statementNum).getCondition(fluentName) != null»
						«compileCond(eventName,statementNum, fluentName, statement_List.get(statementNum).getCondition(fluentName) as ExpressionImpl, "Obelus")»
					«ELSE»
						«compileContextEffect(eventName, statementNum, fluentName, "Obelus", null)»
					«ENDIF»					
				«ENDIF»
				'''
			}
			CurrentTimeImpl:{
				'''
				//compileExpr CURRENT_TIME
				'''
			}
//			ReferenceTypeImpl:{
//				'''
//				
//				'''
//			}
			EventFeatureImpl:{
				'''
				//compileExpr EventFeatureImpl
				'''
			}		
			default: '''//default compileExpr «espr.eClass»'''
		}
	}//compileExpr

	def compileContextEffect (String eventName, int statementNum, String fluentName, String opExpr, String opCond){
		'''
		«IF opCond!=null»
			Context _«eventName.toFirstLower»_«fluentName»_Context_«statementNum» =«
				» new ContextImpl(paramsOfStatement_«statementNum», _«eventName.toFirstLower»_«fluentName»_«statementNum»_ToValue_«opExpr», «
					»_«eventName.toFirstLower»_«fluentName»_«statementNum»_CondValue_«opCond»);
		«ELSE»
			Context _«eventName.toFirstLower»_«fluentName»_Context_«statementNum» =«
				» new ContextImpl(paramsOfStatement_«statementNum», _«eventName.toFirstLower»_«fluentName»_«statementNum»_ToValue_«opExpr», «
					» null);
		«ENDIF»
		
		Effect _«eventName.toFirstLower»_«fluentName»_«statementNum» = new EffectImpl("«fluentName»", «
			»_«eventName.toFirstLower»_«fluentName»_Context_«statementNum»);
			effect_List_«statementNum».add(_«eventName.toFirstLower»_«fluentName»_«statementNum»);
		// Statement «statementNum» Finish
		'''
	}


/*________________________________________________________________________________________*/	
	/**FIRST Condition Compile */
	def compileCond (String eventName, int statementNum, String fluentName, ExpressionImpl conditionExpr, String exprOp){
		var cond = conditionExpr.condition
		switch cond{
			NotImpl:{
				'''
				«IF cond.expression.eClass.name.equals("Constant")»
					ConditionDescr _«eventName.toFirstLower»_«fluentName»_«statementNum»_CondValue_Not = «
						» new NotDescr( «compileTerminalLeft(eventName, statementNum,fluentName,cond.expression as ExpressionImpl)»);
				«ELSE»
					ConditionDescr _«eventName.toFirstLower»_«fluentName»_«statementNum»_CondValue_Not = «
						» new NotDescr(«compileRecExpr(eventName, statementNum,fluentName,cond.expression as ExpressionImpl)»);
				«ENDIF»
				
				«compileContextEffect(eventName,statementNum,fluentName,exprOp,"Not")»
				'''
			}
			OrImpl:{
				'''
				«IF cond.left.eClass.name.contains("Constant") && cond.right.eClass.name.contains("Constant")»
				ConditionDescr _«eventName.toFirstLower»_«fluentName»_«statementNum»_CondValue_Or = «
					» new OrDescr( «compileTerminalLeft(eventName, statementNum,fluentName,cond.left as ExpressionImpl)»,«
						»«compileTerminalRight(eventName, statementNum,fluentName,cond.right as ExpressionImpl)»);
				«ELSE»
					«IF cond.left.eClass.name.contains("Constant")»
						ConditionDescr _«eventName.toFirstLower»_«fluentName»_«statementNum»_CondValue_Or = «
						» new OrDescr(«compileTerminalLeft(eventName, statementNum,fluentName,cond.left as ExpressionImpl)»,
						«compileRecExpr(eventName, statementNum,fluentName,cond.right as ExpressionImpl)»);
					«ENDIF»
					«IF !cond.left.eClass.name.contains("Constant")»
						ConditionDescr _«eventName.toFirstLower»_«fluentName»_«statementNum»_CondValue_Or = «
						» new OrDescr(«compileRecExpr(eventName, statementNum,fluentName,cond.left as ExpressionImpl)»,
						«compileRecExpr(eventName, statementNum,fluentName,cond.right as ExpressionImpl)»);
					«ENDIF»
				«ENDIF»
				
				«compileContextEffect(eventName,statementNum,fluentName,exprOp,"Or")»
				'''
			}
			AndImpl:{
				'''
				«IF cond.left.eClass.name.contains("Constant") && cond.right.eClass.name.contains("Constant")»
				ConditionDescr _«eventName.toFirstLower»_«fluentName»_«statementNum»_CondValue_And = «
					» new AndDescr( «compileTerminalLeft(eventName, statementNum,fluentName,cond.left as ExpressionImpl)»,«
						»«compileTerminalRight(eventName, statementNum,fluentName,cond.right as ExpressionImpl)»);
				«ELSE»
					«IF cond.left.eClass.name.contains("Constant")»
						ConditionDescr _«eventName.toFirstLower»_«fluentName»_«statementNum»_CondValue_And = «
						» new AndDescr(«compileTerminalLeft(eventName, statementNum,fluentName,cond.left as ExpressionImpl)»,
						«compileRecExpr(eventName, statementNum,fluentName,cond.right as ExpressionImpl)»);
					«ENDIF»
					«IF !cond.left.eClass.name.contains("Constant")»
						ConditionDescr _«eventName.toFirstLower»_«fluentName»_«statementNum»_CondValue_And = «
						» new AndDescr(«compileRecExpr(eventName, statementNum,fluentName,cond.left as ExpressionImpl)»,
						«compileRecExpr(eventName, statementNum,fluentName,cond.right as ExpressionImpl)»);
					«ENDIF»
				«ENDIF»
				
				«compileContextEffect(eventName,statementNum,fluentName,exprOp,"And")»
				
				'''
			}
			EqualityImpl:{
				'''
				«IF cond.op.equals("==")»					««««==
					«IF cond.left.eClass.name.contains("Constant") && cond.right.eClass.name.contains("Constant")»
					ConditionDescr _«eventName.toFirstLower»_«fluentName»_«statementNum»_CondValue_Same = «
						» new SameDescr( «compileTerminalLeft(eventName, statementNum,fluentName,cond.left as ExpressionImpl)»,«
							»«compileTerminalRight(eventName, statementNum,fluentName,cond.right as ExpressionImpl)»);
					«ELSE»
						«IF cond.left.eClass.name.contains("Constant")»
							ConditionDescr _«eventName.toFirstLower»_«fluentName»_«statementNum»_CondValue_Same = «
							» new SameDescr(«compileTerminalLeft(eventName, statementNum,fluentName,cond.left as ExpressionImpl)»,
							«compileRecExpr(eventName, statementNum,fluentName,cond.right as ExpressionImpl)»);
						«ENDIF»
						«IF !cond.left.eClass.name.contains("Constant")»
							ConditionDescr _«eventName.toFirstLower»_«fluentName»_«statementNum»_CondValue_Same = «
							» new SameDescr(«compileRecExpr(eventName, statementNum,fluentName,cond.left as ExpressionImpl)»,
							«compileRecExpr(eventName, statementNum,fluentName,cond.right as ExpressionImpl)»);
						«ENDIF»
					«ENDIF»
				
				«compileContextEffect(eventName,statementNum,fluentName,exprOp,"Same")»
				«ELSE» 										««««!=
					«IF cond.left.eClass.name.contains("Constant") && cond.right.eClass.name.contains("Constant")»
					ConditionDescr _«eventName.toFirstLower»_«fluentName»_«statementNum»_CondValue_Different = «
						» new DifferentDescr( «compileTerminalLeft(eventName, statementNum,fluentName,cond.left as ExpressionImpl)»,«
							»«compileTerminalRight(eventName, statementNum,fluentName,cond.right as ExpressionImpl)»);
					«ELSE»
						«IF cond.left.eClass.name.contains("Constant")»
							ConditionDescr _«eventName.toFirstLower»_«fluentName»_«statementNum»_CondValue_Different = «
							» new DifferentDescr(«compileTerminalLeft(eventName, statementNum,fluentName,cond.left as ExpressionImpl)»,
							«compileRecExpr(eventName, statementNum,fluentName,cond.right as ExpressionImpl)»);
						«ENDIF»
						«IF !cond.left.eClass.name.contains("Constant")»
							ConditionDescr _«eventName.toFirstLower»_«fluentName»_«statementNum»_CondValue_Different = «
							» new DifferentDescr(«compileRecExpr(eventName, statementNum,fluentName,cond.left as ExpressionImpl)»,
							«compileRecExpr(eventName, statementNum,fluentName,cond.right as ExpressionImpl)»);
						«ENDIF»
					«ENDIF»
				
				«compileContextEffect(eventName,statementNum,fluentName,exprOp,"Different")»
				«ENDIF»
				'''
			}
			ComparisonImpl:{
				'''
				«IF cond.op.equals(">=")»					««««>=
					«IF cond.left.eClass.name.contains("Constant") && cond.right.eClass.name.contains("Constant")»
					ConditionDescr _«eventName.toFirstLower»_«fluentName»_«statementNum»_CondValue_MoreEquals = «
						» new MoreEqualsDescr( «compileTerminalLeft(eventName, statementNum,fluentName,cond.left as ExpressionImpl)»,«
							»«compileTerminalRight(eventName, statementNum,fluentName,cond.right as ExpressionImpl)»);
					«ELSE»
						«IF cond.left.eClass.name.contains("Constant")»
							ConditionDescr _«eventName.toFirstLower»_«fluentName»_«statementNum»_CondValue_MoreEquals = «
							» new MoreEqualsDescr(«compileTerminalLeft(eventName, statementNum,fluentName,cond.left as ExpressionImpl)»,
							«compileRecExpr(eventName, statementNum,fluentName,cond.right as ExpressionImpl)»);
						«ENDIF»
						«IF !cond.left.eClass.name.contains("Constant")»
							ConditionDescr _«eventName.toFirstLower»_«fluentName»_«statementNum»_CondValue_MoreEquals = «
							» new MoreEqualsDescr(«compileRecExpr(eventName, statementNum,fluentName,cond.left as ExpressionImpl)»,
							«compileRecExpr(eventName, statementNum,fluentName,cond.right as ExpressionImpl)»);
						«ENDIF»
					«ENDIF»
				
				«compileContextEffect(eventName,statementNum,fluentName,exprOp,"MoreEquals")»				
				«ELSEIF cond.op.equals("<=")» 				««««<=
					«IF cond.left.eClass.name.contains("Constant") && cond.right.eClass.name.contains("Constant")»
					ConditionDescr _«eventName.toFirstLower»_«fluentName»_«statementNum»_CondValue_LessEquals = «
						» new LessEqualsDescr( «compileTerminalLeft(eventName, statementNum,fluentName,cond.left as ExpressionImpl)»,«
							»«compileTerminalRight(eventName, statementNum,fluentName,cond.right as ExpressionImpl)»);
					«ELSE»
						«IF cond.left.eClass.name.contains("Constant")»
							ConditionDescr _«eventName.toFirstLower»_«fluentName»_«statementNum»_CondValue_LessEquals = «
							» new LessEqualsDescr(«compileTerminalLeft(eventName, statementNum,fluentName,cond.left as ExpressionImpl)»,
							«compileRecExpr(eventName, statementNum,fluentName,cond.right as ExpressionImpl)»);
						«ENDIF»
						«IF !cond.left.eClass.name.contains("Constant")»
							ConditionDescr _«eventName.toFirstLower»_«fluentName»_«statementNum»_CondValue_LessEquals = «
							» new LessEqualsDescr(«compileRecExpr(eventName, statementNum,fluentName,cond.left as ExpressionImpl)»,
							«compileRecExpr(eventName, statementNum,fluentName,cond.right as ExpressionImpl)»);
						«ENDIF»
					«ENDIF»
				
				«compileContextEffect(eventName,statementNum,fluentName,exprOp,"LessEquals")»				
				«ELSEIF cond.op.equals(">")»				««««>
					«IF cond.left.eClass.name.contains("Constant") && cond.right.eClass.name.contains("Constant")»
					ConditionDescr _«eventName.toFirstLower»_«fluentName»_«statementNum»_CondValue_More = «
						» new MoreDescr( «compileTerminalLeft(eventName, statementNum,fluentName,cond.left as ExpressionImpl)»,«
							»«compileTerminalRight(eventName, statementNum,fluentName,cond.right as ExpressionImpl)»);
					«ELSE»
						«IF cond.left.eClass.name.contains("Constant")»
							ConditionDescr _«eventName.toFirstLower»_«fluentName»_«statementNum»_CondValue_More = «
							» new MoreDescr(«compileTerminalLeft(eventName, statementNum,fluentName,cond.left as ExpressionImpl)»,
							«compileRecExpr(eventName, statementNum,fluentName,cond.right as ExpressionImpl)»);
						«ENDIF»
						«IF !cond.left.eClass.name.contains("Constant")»
							ConditionDescr _«eventName.toFirstLower»_«fluentName»_«statementNum»_CondValue_More = «
							» new MoreDescr(«compileRecExpr(eventName, statementNum,fluentName,cond.left as ExpressionImpl)»,
							«compileRecExpr(eventName, statementNum,fluentName,cond.right as ExpressionImpl)»);
						«ENDIF»
					«ENDIF»
				
				«compileContextEffect(eventName,statementNum,fluentName,exprOp,"More")»				
				«ELSE» 										««««<
					«IF cond.left.eClass.name.contains("Constant") && cond.right.eClass.name.contains("Constant")»
					ConditionDescr _«eventName.toFirstLower»_«fluentName»_«statementNum»_CondValue_Less = «
						» new LessDescr( «compileTerminalLeft(eventName, statementNum,fluentName,cond.left as ExpressionImpl)»,«
							»«compileTerminalRight(eventName, statementNum,fluentName,cond.right as ExpressionImpl)»);
					«ELSE»
						«IF cond.left.eClass.name.contains("Constant")»
							ConditionDescr _«eventName.toFirstLower»_«fluentName»_«statementNum»_CondValue_Less = «
							» new LessDescr(«compileTerminalLeft(eventName, statementNum,fluentName,cond.left as ExpressionImpl)»,
							«compileRecExpr(eventName, statementNum,fluentName,cond.right as ExpressionImpl)»);
						«ENDIF»
						«IF !cond.left.eClass.name.contains("Constant")»
							ConditionDescr _«eventName.toFirstLower»_«fluentName»_«statementNum»_CondValue_Less = «
							» new LessDescr(«compileRecExpr(eventName, statementNum,fluentName,cond.left as ExpressionImpl)»,
							«compileRecExpr(eventName, statementNum,fluentName,cond.right as ExpressionImpl)»);
						«ENDIF»
					«ENDIF»
				
				«compileContextEffect(eventName,statementNum,fluentName,exprOp,"Less")»				
				«ENDIF»
				'''
			}
//			ReferenceTypeImpl:{
//				'''
//				
//				'''
//			}
			FluentImpl:{
				'''
				//compileCond FluentImpl
				'''
			}
			EventFeatureImpl:{
				'''
				//compileCond EventFeatureImpl
				'''
			}
			default: '''//default compileCond'''
		}
	}

/*________________________________________________________________________________________*/
	/** HARD Condition Case */
	def dispatch compileRecExpr (String eventName, int statementNum, String fluentName, NotImpl conditionExpr){
		'''
		«IF conditionExpr.expression.eClass.name.contains("Constant")»
			new NotDescr( «compileTerminalLeft(eventName, statementNum,fluentName,conditionExpr.expression as ExpressionImpl)»)
		«ELSE»
			new NotDescr(«compileRecExpr(eventName, statementNum,fluentName,conditionExpr.expression as ExpressionImpl)»)
		«ENDIF»
		'''
	}
	def dispatch compileRecExpr (String eventName, int statementNum, String fluentName, OrImpl conditionExpr){
		'''
		«IF conditionExpr.left.eClass.name.contains("Constant") && conditionExpr.right.eClass.name.contains("Constant")»
			new OrDescr( «compileTerminalLeft(eventName, statementNum,fluentName,conditionExpr.left as ExpressionImpl)»,«
			»«compileTerminalLeft(eventName, statementNum,fluentName,conditionExpr.right as ExpressionImpl)»)
		«ELSE»
			«IF conditionExpr.left.eClass.name.contains("Constant")»
				new OrDescr(«compileTerminalLeft(eventName, statementNum,fluentName,conditionExpr.left as ExpressionImpl)»,
				«compileRecExpr(eventName, statementNum,fluentName,conditionExpr.right as ExpressionImpl)»)
			«ENDIF»
			«IF !conditionExpr.left.eClass.name.contains("Constant")»
				new OrDescr(«compileRecExpr(eventName, statementNum,fluentName,conditionExpr.left as ExpressionImpl)»,
				«compileRecExpr(eventName, statementNum,fluentName,conditionExpr.right as ExpressionImpl)»)«
			»«ENDIF»
		«ENDIF»
		'''
	}
	def dispatch compileRecExpr (String eventName, int statementNum, String fluentName, AndImpl conditionExpr){
		'''
		«IF conditionExpr.left.eClass.name.contains("Constant") && conditionExpr.right.eClass.name.contains("Constant")»
			new AndDescr( «compileTerminalLeft(eventName, statementNum,fluentName,conditionExpr.left as ExpressionImpl)»,«
			»«compileTerminalLeft(eventName, statementNum,fluentName,conditionExpr.right as ExpressionImpl)»)
		«ELSE»
			«IF conditionExpr.left.eClass.name.contains("Constant")»
				new AndDescr(«compileTerminalLeft(eventName, statementNum,fluentName,conditionExpr.left as ExpressionImpl)»,
				«compileRecExpr(eventName, statementNum,fluentName,conditionExpr.right as ExpressionImpl)»)
			«ENDIF»
			«IF !conditionExpr.left.eClass.name.contains("Constant")»
				new AndDescr(«compileRecExpr(eventName, statementNum,fluentName,conditionExpr.left as ExpressionImpl)»,
				«compileRecExpr(eventName, statementNum,fluentName,conditionExpr.right as ExpressionImpl)»)«
			»«ENDIF»
		«ENDIF»
		'''
	}
	def dispatch compileRecExpr (String eventName, int statementNum, String fluentName, EqualityImpl conditionExpr){
		'''
		«IF conditionExpr.op.equals("==")»						««««==
			«IF conditionExpr.left.eClass.name.contains("Constant") && conditionExpr.right.eClass.name.contains("Constant")»
				new SameDescr( «compileTerminalLeft(eventName, statementNum,fluentName,conditionExpr.left as ExpressionImpl)»,«
				»«compileTerminalLeft(eventName, statementNum,fluentName,conditionExpr.right as ExpressionImpl)»)
			«ELSE»
				«IF conditionExpr.left.eClass.name.contains("Constant")»
					new SameDescr(«compileTerminalLeft(eventName, statementNum,fluentName,conditionExpr.left as ExpressionImpl)»,
					«compileRecExpr(eventName, statementNum,fluentName,conditionExpr.right as ExpressionImpl)»)
				«ENDIF»
				«IF !conditionExpr.left.eClass.name.contains("Constant")»
					new SameDescr(«compileRecExpr(eventName, statementNum,fluentName,conditionExpr.left as ExpressionImpl)»,
					«compileRecExpr(eventName, statementNum,fluentName,conditionExpr.right as ExpressionImpl)»)«
				»«ENDIF»
			«ENDIF»
		«ELSEIF conditionExpr.op.equals("!=")»					««««!=
			«IF conditionExpr.left.eClass.name.contains("Constant") && conditionExpr.right.eClass.name.contains("Constant")»
				new DifferentDescr( «compileTerminalLeft(eventName, statementNum,fluentName,conditionExpr.left as ExpressionImpl)»,«
				»«compileTerminalLeft(eventName, statementNum,fluentName,conditionExpr.right as ExpressionImpl)»)
			«ELSE»
				«IF conditionExpr.left.eClass.name.contains("Constant")»
					new DifferentDescr(«compileTerminalLeft(eventName, statementNum,fluentName,conditionExpr.left as ExpressionImpl)»,
					«compileRecExpr(eventName, statementNum,fluentName,conditionExpr.right as ExpressionImpl)»)
				«ENDIF»
				«IF !conditionExpr.left.eClass.name.contains("Constant")»
					new DifferentDescr(«compileRecExpr(eventName, statementNum,fluentName,conditionExpr.left as ExpressionImpl)»,
					«compileRecExpr(eventName, statementNum,fluentName,conditionExpr.right as ExpressionImpl)»)«
				»«ENDIF»
			«ENDIF»
		«ENDIF»
		'''
	}
	def dispatch compileRecExpr (String eventName, int statementNum, String fluentName, ComparisonImpl conditionExpr){
		'''
		«IF conditionExpr.op.equals(">=")»						««««>=
			«IF conditionExpr.left.eClass.name.contains("Constant") && conditionExpr.right.eClass.name.contains("Constant")»
				new MoreEqualsDescr( «compileTerminalLeft(eventName, statementNum,fluentName,conditionExpr.left as ExpressionImpl)»,«
				»«compileTerminalLeft(eventName, statementNum,fluentName,conditionExpr.right as ExpressionImpl)»)
			«ELSE»
				«IF conditionExpr.left.eClass.name.contains("Constant")»
					new MoreEqualsDescr(«compileTerminalLeft(eventName, statementNum,fluentName,conditionExpr.left as ExpressionImpl)»,
					«compileRecExpr(eventName, statementNum,fluentName,conditionExpr.right as ExpressionImpl)»)
				«ENDIF»
				«IF !conditionExpr.left.eClass.name.contains("Constant")»
					new MoreEqualsDescr(«compileRecExpr(eventName, statementNum,fluentName,conditionExpr.left as ExpressionImpl)»,
					«compileRecExpr(eventName, statementNum,fluentName,conditionExpr.right as ExpressionImpl)»)«
				»«ENDIF»
			«ENDIF»
		«ELSEIF conditionExpr.op.equals("<=")»					««««<=
			«IF conditionExpr.left.eClass.name.contains("Constant") && conditionExpr.right.eClass.name.contains("Constant")»
				new LessEqualsDescr( «compileTerminalLeft(eventName, statementNum,fluentName,conditionExpr.left as ExpressionImpl)»,«
				»«compileTerminalLeft(eventName, statementNum,fluentName,conditionExpr.right as ExpressionImpl)»)
			«ELSE»
				«IF conditionExpr.left.eClass.name.contains("Constant")»
					new LessEqualsDescr(«compileTerminalLeft(eventName, statementNum,fluentName,conditionExpr.left as ExpressionImpl)»,
					«compileRecExpr(eventName, statementNum,fluentName,conditionExpr.right as ExpressionImpl)»)
				«ENDIF»
				«IF !conditionExpr.left.eClass.name.contains("Constant")»
					new LessEqualsDescr(«compileRecExpr(eventName, statementNum,fluentName,conditionExpr.left as ExpressionImpl)»,
					«compileRecExpr(eventName, statementNum,fluentName,conditionExpr.right as ExpressionImpl)»)«
				»«ENDIF»
			«ENDIF»
		«ELSEIF conditionExpr.op.equals(">")»					««««>
			«IF conditionExpr.left.eClass.name.contains("Constant") && conditionExpr.right.eClass.name.contains("Constant")»
				new MoreDescr( «compileTerminalLeft(eventName, statementNum,fluentName,conditionExpr.left as ExpressionImpl)»,«
				»«compileTerminalLeft(eventName, statementNum,fluentName,conditionExpr.right as ExpressionImpl)»)
			«ELSE»
				«IF conditionExpr.left.eClass.name.contains("Constant")»
					new MoreDescr(«compileTerminalLeft(eventName, statementNum,fluentName,conditionExpr.left as ExpressionImpl)»,
					«compileRecExpr(eventName, statementNum,fluentName,conditionExpr.right as ExpressionImpl)»)
				«ENDIF»
				«IF !conditionExpr.left.eClass.name.contains("Constant")»
					new MoreDescr(«compileRecExpr(eventName, statementNum,fluentName,conditionExpr.left as ExpressionImpl)»,
					«compileRecExpr(eventName, statementNum,fluentName,conditionExpr.right as ExpressionImpl)»)«
				»«ENDIF»
			«ENDIF»
		«ELSE»													««««<
			«IF conditionExpr.left.eClass.name.contains("Constant") && conditionExpr.right.eClass.name.contains("Constant")»
				new LessDescr( «compileTerminalLeft(eventName, statementNum,fluentName,conditionExpr.left as ExpressionImpl)»,«
				»«compileTerminalLeft(eventName, statementNum,fluentName,conditionExpr.right as ExpressionImpl)»)
			«ELSE»
				«IF conditionExpr.left.eClass.name.contains("Constant")»
					new LessDescr(«compileTerminalLeft(eventName, statementNum,fluentName,conditionExpr.left as ExpressionImpl)»,
					«compileRecExpr(eventName, statementNum,fluentName,conditionExpr.right as ExpressionImpl)»)
				«ENDIF»
				«IF !conditionExpr.left.eClass.name.contains("Constant")»
					new LessDescr(«compileRecExpr(eventName, statementNum,fluentName,conditionExpr.left as ExpressionImpl)»,
					«compileRecExpr(eventName, statementNum,fluentName,conditionExpr.right as ExpressionImpl)»)«
				»«ENDIF»
			«ENDIF»
		«ENDIF»
		'''
	}
			

	


}
/**
 * 
 * ALL Expression Type -->
 * 
 */
//			switch expr{
//				Plus:{}
//				IntConstant:{compileExpr(expr)}
//				BoolConstant:{'''//some1'''}
//				FloatConstant:{'''//some2'''}
//				And:{'''//some3'''}
//				Or:{'''//some3.1'''}			
//				Equality:{'''//some4'''}
//				Comparison:{'''//some5'''}
//				Minus:{'''//some6'''}
//				MulOrDiv:{'''//some7'''}
//				Not:{'''//some8'''}
//				FeatureRef: {'''//some9'''}
//				default: compileExpr(expr as IntConstant)
//			}//Switch