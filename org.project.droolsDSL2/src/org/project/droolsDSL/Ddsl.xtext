grammar org.project.droolsDSL.Ddsl with org.eclipse.xtext.common.Terminals

generate ddsl "http://www.project.org/droolsDSL/Ddsl"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore


DroolsModel:
	statements += Statement*
;

Statement:
	'on' event=Event 'set' fluent+=Fluent (',' fluent+=Fluent)* ';' 	
;

Event:
	eventName=ID	
	('('param+=EventFeature (',' param+=EventFeature)* ')')?	
;

Fluent:
	name=ID
	('to' valuePart = ToRule)
	('in' timePart = InRule)? 
	('if' condPart = ConditionRule)?
;

ConditionRule:
	({Expression} condition = Expression)
;

ToRule:
	({Expression} expression = PlusOrMinus)
;

InRule:	
	time=PlusOrMinus	
;

EventFeature: name=ID;

// LEFT_ASSOCIATIVITY
Expression: Or;

Or returns Expression:
	And ({Or.left=current} "OR" right=And)* 
;

And returns Expression:
	Equality ({And.left=current} "AND" right=Equality)* 
;

Equality returns Expression:
	Comparison (
		{Equality.left=current} op=("=="|"!=")
		right=Comparison
	)* 
;

Comparison returns Expression:
	PlusOrMinus (
		{Comparison.left=current} op=(">="|"<="|">"|"<")
		right=PlusOrMinus
	)* 
;

PlusOrMinus returns Expression:
	MulOrDiv (
	({Plus.left=current} '+' | {Minus.left=current} '-')
	right=MulOrDiv
	)* 
;

MulOrDiv returns Expression:
	Primary (
		{MulOrDiv.left=current} op=('*'|'/'|'%'|'^')
		right=Primary
	)*
;

Primary returns Expression:
	'(' Expression ')' |
	{Not} "!" expression=Primary |
	Atomic
;

Atomic returns Expression:
	{FloatConstant} value=FLOAT |
	{IntConstant} value=INT |
	{BoolConstant} value=('true'|'false')
	|{Reference} ref=[ReferenceType|ID] ('('fluentValueSample = INT')')?
	|{CurrentTime} value='now'
;
ReferenceType:EventFeature|Fluent;


terminal FLOAT returns ecore::EFloat: ('0'..'9')*'.'('0'..'9')+;
	