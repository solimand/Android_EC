/*
 * generated by Xtext
 */
package org.project.droolsDSL.scoping

//import static extension java.lang.Character.*
import org.project.droolsDSL.ddsl.Statement
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.scoping.Scopes
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider
import static extension java.lang.Character.*
import org.project.droolsDSL.ddsl.DroolsModel
import org.eclipse.emf.ecore.EObject
import java.util.List
import org.project.droolsDSL.ddsl.Fluent
import org.project.droolsDSL.ddsl.EventFeature
import org.project.droolsDSL.ddsl.Expression
import org.project.droolsDSL.ddsl.InExpr
import org.project.droolsDSL.ddsl.impl.EventFeatureImpl
import org.project.droolsDSL.ddsl.DdslPackage
import org.eclipse.xtext.scoping.IScope
import org.project.droolsDSL.ddsl.ReferenceType
import org.project.droolsDSL.ddsl.impl.ReferenceTypeImpl

/**
 * This class contains custom scoping description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation.html#scoping
 * on how and when to use it 
 *
 * IScope scope_<EClass name>_<EFeature name>(<Context type> context,EReference reference)
 * 
 * IScope scope_<Object type>(<Context type> context,EReference reference)
 *  
 * PS = the scope for our DSL is:
 * 		PARAM visibility = Statement Only;
 * 		FLUENT visibility = All Model.
 */
class DdslScopeProvider extends AbstractDeclarativeScopeProvider {

//	def scope_Reference_ref(Expression expr, EReference ref){
//		expr.eContainer.symbolsDefineBefore(expr)
//	}
//	
//	def scope_Reference_ref(InExpr expr, EReference ref){
//		expr.eContainer.symbolsDefineBefore(expr)
//	}
//
//	def dispatch IScope symbolsDefineBefore(Statement b, EObject o) {
////		Scopes::scopeFor(b.event.param)
//		Scopes::scopeFor(b.allParamInStatement(o))
//	}
//	
//	def dispatch IScope symbolsDefineBefore(DroolsModel b, EObject o) {
//		Scopes::scopeFor(b.statements.allFluentDeclaration(o))
//	}
//	
//	
	def private allFluentDeclaration(List<Statement> list){//}, EObject o) {
		list.filter(typeof(Fluent))
	}
//	def private allParamInStatement(Statement state, EObject o){
//		state.event.param
//	else IScope::NULLSCOPE
//	}

	def dispatch IScope function1(Statement context, EObject o){
		Scopes::scopeFor(context.event.param)//,context.eContainer.function1(o.eContainer))
	}
//	def dispatch IScope function1(EObject context, EObject o){
//		context.eContainer.function1(o.eContainer)
//	}
//	def scope_Reference_ref(Expression context, EReference r){
//		context.eContainer.function1(context)
//	}
	def dispatch IScope function1(DroolsModel context, EObject o){
		Scopes::scopeFor(context.statements.allFluentDeclaration)
	}
	
}
